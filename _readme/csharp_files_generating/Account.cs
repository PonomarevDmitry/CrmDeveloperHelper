//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RFB.Core.Entities
{
    
    
    /// <summary>
    /// DisplayName:
    ///     (English - United States - 1033): Account
    ///     (Russian - 1049): Организация
    /// 
    /// DisplayCollectionName:
    ///     (English - United States - 1033): Accounts
    ///     (Russian - 1049): Организации
    /// 
    /// Description:
    ///     (English - United States - 1033): Business that represents a customer or potential customer. The company that is billed in business transactions.
    ///     (Russian - 1049): Компания, представляющая существующего или потенциального клиента. Компания, которой выставляется счет в деловых транзакциях.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute()]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute(Account.EntityLogicalName)]
    [System.ComponentModel.DescriptionAttribute("Account")]
    public partial class Account : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        
        public const string EntityLogicalName = "account";
        
        public const string EntitySchemaName = "Account";
        
        public const int EntityTypeCode = 1;
        
        public const string EntityPrimaryIdAttribute = "accountid";
        
        public const string EntityPrimaryNameAttribute = "name";
        
        public const string EntityPrimaryImageAttribute = "entityimage";
        
        /// <summary>
        /// Default Constructor account
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Account() : 
                base(EntityLogicalName)
        {
        }
        
        /// <summary>
        /// Constructor account for populating via LINQ queries given a LINQ anonymous type object
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Account(object anonymousObject) : 
                this()
        {
            if (anonymousObject == null)
            {
                return;
            }

            System.Type anonymousObjectType = anonymousObject.GetType();

            if (!anonymousObjectType.Name.StartsWith("<>")
                || anonymousObjectType.Name.IndexOf("AnonymousType", System.StringComparison.InvariantCultureIgnoreCase) == -1
            )
            {
                return;
            }

            foreach (var prop in anonymousObjectType.GetProperties())
            {
                var value = prop.GetValue(anonymousObject, null);
                var name = prop.Name.ToLower();

                switch (name)
                {
                    case "id":
                    case EntityPrimaryIdAttribute:
                        if (value is System.Guid idValue)
                        {
                            Attributes[EntityPrimaryIdAttribute] = base.Id = idValue;
                        }
                        break;

                    default:
                        if (value is Microsoft.Xrm.Sdk.FormattedValueCollection formattedValueCollection)
                        {
                            FormattedValues.AddRange(formattedValueCollection);
                        }
                        else
                        {
                            Attributes[name] = value;
                        }
                        break;
                }
            }
        }
        
        #region NotifyProperty Events

        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanging(string propertyName)
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }
        

        #endregion
        
        #region Primary Attributes

        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Account
        ///     (Russian - 1049): Организация
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the account.
        ///     (Russian - 1049): Уникальный идентификатор организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.ComponentModel.DescriptionAttribute("Account")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Guid Id
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return base.Id;
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.AccountId = value;
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Account
        ///     (Russian - 1049): Организация
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the account.
        ///     (Russian - 1049): Уникальный идентификатор организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.ComponentModel.DescriptionAttribute("Account")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> AccountId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(EntityPrimaryIdAttribute);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountId));
                this.SetAttributeValue(EntityPrimaryIdAttribute, value);
                if (value.HasValue)
                {
                    base.Id = value.Value;
                }
                else
                {
                    base.Id = System.Guid.Empty;
                }
                this.OnPropertyChanged(nameof(AccountId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Account Name
        ///     (Russian - 1049): Название организации
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the company or business name.
        ///     (Russian - 1049): Введите наименование компании или предприятия.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryNameAttribute)]
        [System.ComponentModel.DescriptionAttribute("Account Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(EntityPrimaryNameAttribute);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Name));
                this.SetAttributeValue(EntityPrimaryNameAttribute, value);
                this.OnPropertyChanged(nameof(Name));
            }
        }
        

        #endregion
        
        #region Attributes

        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Category
        ///     (Russian - 1049): Категория
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a category to indicate whether the customer account is standard or preferred.
        ///     (Russian - 1049): Выберите категорию организации клиента: стандартная или привилегированная.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.accountcategorycode)]
        [System.ComponentModel.DescriptionAttribute("Category")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue AccountCategoryCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.accountcategorycode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountCategoryCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountcategorycode, value);
                this.OnPropertyChanged(nameof(AccountCategoryCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Category
        ///     (Russian - 1049): Категория
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a category to indicate whether the customer account is standard or preferred.
        ///     (Russian - 1049): Выберите категорию организации клиента: стандартная или привилегированная.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.accountcategorycode)]
        [System.ComponentModel.DescriptionAttribute("Category")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.accountcategorycode> AccountCategoryCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.accountcategorycode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.accountcategorycode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.accountcategorycode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.accountcategorycode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountCategoryCodeEnum));
                this.OnPropertyChanging(nameof(AccountCategoryCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountcategorycode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountcategorycode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(AccountCategoryCode));
                this.OnPropertyChanged(nameof(AccountCategoryCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Classification
        ///     (Russian - 1049): Классификация
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.
        ///     (Russian - 1049): Выберите код классификации, указывающий потенциальную значимость организации клиента исходя из ожидаемых отдачи от вложений, уровня сотрудничества, длительности цикла продаж или других критериев.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.accountclassificationcode)]
        [System.ComponentModel.DescriptionAttribute("Classification")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue AccountClassificationCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.accountclassificationcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountClassificationCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountclassificationcode, value);
                this.OnPropertyChanged(nameof(AccountClassificationCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Classification
        ///     (Russian - 1049): Классификация
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.
        ///     (Russian - 1049): Выберите код классификации, указывающий потенциальную значимость организации клиента исходя из ожидаемых отдачи от вложений, уровня сотрудничества, длительности цикла продаж или других критериев.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.accountclassificationcode)]
        [System.ComponentModel.DescriptionAttribute("Classification")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.accountclassificationcode> AccountClassificationCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.accountclassificationcode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.accountclassificationcode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.accountclassificationcode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.accountclassificationcode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountClassificationCodeEnum));
                this.OnPropertyChanging(nameof(AccountClassificationCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountclassificationcode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountclassificationcode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(AccountClassificationCode));
                this.OnPropertyChanged(nameof(AccountClassificationCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Account Number
        ///     (Russian - 1049): Код организации
        /// 
        /// Description:
        ///     (English - United States - 1033): Type an ID number or code for the account to quickly search and identify the account in system views.
        ///     (Russian - 1049): Введите идентификационный номер или код счета для быстрого поиска организации в системных представлениях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.accountnumber)]
        [System.ComponentModel.DescriptionAttribute("Account Number")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string AccountNumber
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.accountnumber);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountNumber));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountnumber, value);
                this.OnPropertyChanged(nameof(AccountNumber));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Account Rating
        ///     (Russian - 1049): Оценка организации
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a rating to indicate the value of the customer account.
        ///     (Russian - 1049): Выберите рейтинг, указывающий ценность организации клиента.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.accountratingcode)]
        [System.ComponentModel.DescriptionAttribute("Account Rating")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue AccountRatingCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.accountratingcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountRatingCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountratingcode, value);
                this.OnPropertyChanged(nameof(AccountRatingCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Account Rating
        ///     (Russian - 1049): Оценка организации
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a rating to indicate the value of the customer account.
        ///     (Russian - 1049): Выберите рейтинг, указывающий ценность организации клиента.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.accountratingcode)]
        [System.ComponentModel.DescriptionAttribute("Account Rating")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.accountratingcode> AccountRatingCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.accountratingcode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.accountratingcode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.accountratingcode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.accountratingcode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AccountRatingCodeEnum));
                this.OnPropertyChanging(nameof(AccountRatingCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountratingcode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.accountratingcode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(AccountRatingCode));
                this.OnPropertyChanged(nameof(AccountRatingCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: ID
        ///     (Russian - 1049): Адрес 1: идентификатор
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier for address 1.
        ///     (Russian - 1049): Уникальный идентификатор для адреса 1.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_addressid)]
        [System.ComponentModel.DescriptionAttribute("Address 1: ID")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> Address1_AddressId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(RFB.Core.Entities.Account.Schema.Attributes.address1_addressid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_AddressId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_addressid, value);
                this.OnPropertyChanged(nameof(Address1_AddressId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Address Type
        ///     (Russian - 1049): Адрес 1: тип адреса
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the primary address type.
        ///     (Russian - 1049): Выберите тип основного адреса
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_addresstypecode)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Address Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue Address1_AddressTypeCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address1_addresstypecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_AddressTypeCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_addresstypecode, value);
                this.OnPropertyChanged(nameof(Address1_AddressTypeCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Address Type
        ///     (Russian - 1049): Адрес 1: тип адреса
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the primary address type.
        ///     (Russian - 1049): Выберите тип основного адреса
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_addresstypecode)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Address Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.address1_addresstypecode> Address1_AddressTypeCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address1_addresstypecode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address1_addresstypecode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.address1_addresstypecode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address1_addresstypecode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_AddressTypeCodeEnum));
                this.OnPropertyChanging(nameof(Address1_AddressTypeCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_addresstypecode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_addresstypecode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(Address1_AddressTypeCode));
                this.OnPropertyChanged(nameof(Address1_AddressTypeCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: City
        ///     (Russian - 1049): Адрес 1: город
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the city for the primary address.
        ///     (Russian - 1049): Введите город для основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_city)]
        [System.ComponentModel.DescriptionAttribute("Address 1: City")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_City
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_city);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_City));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_city, value);
                this.OnPropertyChanged(nameof(Address1_City));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1
        ///     (Russian - 1049): Адрес 1
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the complete primary address.
        ///     (Russian - 1049): Показывает полный основной адрес.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_composite)]
        [System.ComponentModel.DescriptionAttribute("Address 1")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Composite
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_composite);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Country/Region
        ///     (Russian - 1049): Адрес 1: страна
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the country or region for the primary address.
        ///     (Russian - 1049): Введите страну или регион для основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_country)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Country/Region")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Country
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_country);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Country));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_country, value);
                this.OnPropertyChanged(nameof(Address1_Country));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: County
        ///     (Russian - 1049): Адрес 1: округ
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the county for the primary address.
        ///     (Russian - 1049): Введите район для основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_county)]
        [System.ComponentModel.DescriptionAttribute("Address 1: County")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_County
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_county);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_County));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_county, value);
                this.OnPropertyChanged(nameof(Address1_County));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Fax
        ///     (Russian - 1049): Адрес 1: факс
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the fax number associated with the primary address.
        ///     (Russian - 1049): Введите номер факса, связанный с основным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_fax)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Fax")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Fax
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_fax);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Fax));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_fax, value);
                this.OnPropertyChanged(nameof(Address1_Fax));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Freight Terms
        ///     (Russian - 1049): Адрес 1: условия поставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the freight terms for the primary address to make sure shipping orders are processed correctly.
        ///     (Russian - 1049): Выберите условия поставки для основного адреса, чтобы заказы на поставку обрабатывались правильно.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_freighttermscode)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Freight Terms")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue Address1_FreightTermsCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address1_freighttermscode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_FreightTermsCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_freighttermscode, value);
                this.OnPropertyChanged(nameof(Address1_FreightTermsCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Freight Terms
        ///     (Russian - 1049): Адрес 1: условия поставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the freight terms for the primary address to make sure shipping orders are processed correctly.
        ///     (Russian - 1049): Выберите условия поставки для основного адреса, чтобы заказы на поставку обрабатывались правильно.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_freighttermscode)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Freight Terms")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.address1_freighttermscode> Address1_FreightTermsCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address1_freighttermscode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address1_freighttermscode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.address1_freighttermscode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address1_freighttermscode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_FreightTermsCodeEnum));
                this.OnPropertyChanging(nameof(Address1_FreightTermsCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_freighttermscode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_freighttermscode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(Address1_FreightTermsCode));
                this.OnPropertyChanged(nameof(Address1_FreightTermsCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Latitude
        ///     (Russian - 1049): Адрес 1: широта
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the latitude value for the primary address for use in mapping and other applications.
        ///     (Russian - 1049): Введите значение широты для основного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_latitude)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Latitude")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<double> Address1_Latitude
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<double>>(RFB.Core.Entities.Account.Schema.Attributes.address1_latitude);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Latitude));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_latitude, value);
                this.OnPropertyChanged(nameof(Address1_Latitude));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Street 1
        ///     (Russian - 1049): Адрес 1: улица, дом (строка 1)
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the first line of the primary address.
        ///     (Russian - 1049): Введите первую строку основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_line1)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Street 1")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Line1
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_line1);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Line1));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_line1, value);
                this.OnPropertyChanged(nameof(Address1_Line1));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Street 2
        ///     (Russian - 1049): Адрес 1: улица, дом (строка 2)
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the second line of the primary address.
        ///     (Russian - 1049): Введите вторую строку основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_line2)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Street 2")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Line2
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_line2);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Line2));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_line2, value);
                this.OnPropertyChanged(nameof(Address1_Line2));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Street 3
        ///     (Russian - 1049): Адрес 1: улица, дом (строка 3)
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the third line of the primary address.
        ///     (Russian - 1049): Введите третью строку основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_line3)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Street 3")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Line3
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_line3);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Line3));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_line3, value);
                this.OnPropertyChanged(nameof(Address1_Line3));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Longitude
        ///     (Russian - 1049): Адрес 1: долгота
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the longitude value for the primary address for use in mapping and other applications.
        ///     (Russian - 1049): Введите значение долготы для основного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_longitude)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Longitude")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<double> Address1_Longitude
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<double>>(RFB.Core.Entities.Account.Schema.Attributes.address1_longitude);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Longitude));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_longitude, value);
                this.OnPropertyChanged(nameof(Address1_Longitude));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Name
        ///     (Russian - 1049): Адрес 1: название
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a descriptive name for the primary address, such as Corporate Headquarters.
        ///     (Russian - 1049): Введите информативное имя для основного адреса (например, "Штаб-квартира корпорации").
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_name)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Name
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_name);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Name));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_name, value);
                this.OnPropertyChanged(nameof(Address1_Name));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: ZIP/Postal Code
        ///     (Russian - 1049): Адрес 1: почтовый индекс
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the ZIP Code or postal code for the primary address.
        ///     (Russian - 1049): Введите почтовый индекс для основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_postalcode)]
        [System.ComponentModel.DescriptionAttribute("Address 1: ZIP/Postal Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_PostalCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_postalcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_PostalCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_postalcode, value);
                this.OnPropertyChanged(nameof(Address1_PostalCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Post Office Box
        ///     (Russian - 1049): Адрес 1: абонентский ящик
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the post office box number of the primary address.
        ///     (Russian - 1049): Введите номер абонентского ящика для основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_postofficebox)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Post Office Box")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_PostOfficeBox
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_postofficebox);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_PostOfficeBox));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_postofficebox, value);
                this.OnPropertyChanged(nameof(Address1_PostOfficeBox));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Primary Contact Name
        ///     (Russian - 1049): Адрес 1: имя основного контакта
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the name of the main contact at the account's primary address.
        ///     (Russian - 1049): Введите имя основного контакта для основного адреса организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_primarycontactname)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Primary Contact Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_PrimaryContactName
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_primarycontactname);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_PrimaryContactName));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_primarycontactname, value);
                this.OnPropertyChanged(nameof(Address1_PrimaryContactName));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Shipping Method
        ///     (Russian - 1049): Адрес 1: способ доставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a shipping method for deliveries sent to this address.
        ///     (Russian - 1049): Выберите метод поставки для доставок по этому адресу.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_shippingmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Shipping Method")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue Address1_ShippingMethodCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address1_shippingmethodcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_ShippingMethodCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_shippingmethodcode, value);
                this.OnPropertyChanged(nameof(Address1_ShippingMethodCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Shipping Method
        ///     (Russian - 1049): Адрес 1: способ доставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a shipping method for deliveries sent to this address.
        ///     (Russian - 1049): Выберите метод поставки для доставок по этому адресу.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_shippingmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Shipping Method")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.address1_shippingmethodcode> Address1_ShippingMethodCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address1_shippingmethodcode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address1_shippingmethodcode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.address1_shippingmethodcode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address1_shippingmethodcode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_ShippingMethodCodeEnum));
                this.OnPropertyChanging(nameof(Address1_ShippingMethodCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_shippingmethodcode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_shippingmethodcode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(Address1_ShippingMethodCode));
                this.OnPropertyChanged(nameof(Address1_ShippingMethodCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: State/Province
        ///     (Russian - 1049): Адрес 1: область, край, республика
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the state or province of the primary address.
        ///     (Russian - 1049): Введите область или республику для основного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_stateorprovince)]
        [System.ComponentModel.DescriptionAttribute("Address 1: State/Province")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_StateOrProvince
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_stateorprovince);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_StateOrProvince));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_stateorprovince, value);
                this.OnPropertyChanged(nameof(Address1_StateOrProvince));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address Phone
        ///     (Russian - 1049): Телефон
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the main phone number associated with the primary address.
        ///     (Russian - 1049): Введите основной номер телефона, связанный с основным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone1)]
        [System.ComponentModel.DescriptionAttribute("Address Phone")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Telephone1
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone1);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Telephone1));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone1, value);
                this.OnPropertyChanged(nameof(Address1_Telephone1));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Telephone 2
        ///     (Russian - 1049): Адрес 1: телефон 2
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a second phone number associated with the primary address.
        ///     (Russian - 1049): Введите второй номер телефона, связанный с основным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone2)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Telephone 2")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Telephone2
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone2);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Telephone2));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone2, value);
                this.OnPropertyChanged(nameof(Address1_Telephone2));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: Telephone 3
        ///     (Russian - 1049): Адрес 1: телефон 3
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a third phone number associated with the primary address.
        ///     (Russian - 1049): Введите третий номер телефона, связанный с основным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone3)]
        [System.ComponentModel.DescriptionAttribute("Address 1: Telephone 3")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_Telephone3
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone3);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_Telephone3));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_telephone3, value);
                this.OnPropertyChanged(nameof(Address1_Telephone3));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: UPS Zone
        ///     (Russian - 1049): Адрес 1: зона UPS
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
        ///     (Russian - 1049): Введите зону UPS основного адреса, чтобы доставка с помощью службы UPS осуществлялась быстро, а расходы на доставку рассчитывались правильно.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_upszone)]
        [System.ComponentModel.DescriptionAttribute("Address 1: UPS Zone")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address1_UPSZone
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address1_upszone);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_UPSZone));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_upszone, value);
                this.OnPropertyChanged(nameof(Address1_UPSZone));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 1: UTC Offset
        ///     (Russian - 1049): Адрес 1: часовой пояс
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
        ///     (Russian - 1049): Выберите часовой пояс (или отклонение от UTC) для этого адреса, чтобы другие пользователи могли учитывать его, связываясь с кем-нибудь по этому адресу.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address1_utcoffset)]
        [System.ComponentModel.DescriptionAttribute("Address 1: UTC Offset")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> Address1_UTCOffset
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.address1_utcoffset);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address1_UTCOffset));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address1_utcoffset, value);
                this.OnPropertyChanged(nameof(Address1_UTCOffset));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: ID
        ///     (Russian - 1049): Адрес 2: идентификатор
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier for address 2.
        ///     (Russian - 1049): Уникальный идентификатор для адреса 2.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_addressid)]
        [System.ComponentModel.DescriptionAttribute("Address 2: ID")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> Address2_AddressId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(RFB.Core.Entities.Account.Schema.Attributes.address2_addressid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_AddressId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_addressid, value);
                this.OnPropertyChanged(nameof(Address2_AddressId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Address Type
        ///     (Russian - 1049): Адрес 2: тип адреса
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the secondary address type.
        ///     (Russian - 1049): Выберите тип дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_addresstypecode)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Address Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue Address2_AddressTypeCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address2_addresstypecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_AddressTypeCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_addresstypecode, value);
                this.OnPropertyChanged(nameof(Address2_AddressTypeCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Address Type
        ///     (Russian - 1049): Адрес 2: тип адреса
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the secondary address type.
        ///     (Russian - 1049): Выберите тип дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_addresstypecode)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Address Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.address2_addresstypecode> Address2_AddressTypeCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address2_addresstypecode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address2_addresstypecode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.address2_addresstypecode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address2_addresstypecode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_AddressTypeCodeEnum));
                this.OnPropertyChanging(nameof(Address2_AddressTypeCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_addresstypecode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_addresstypecode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(Address2_AddressTypeCode));
                this.OnPropertyChanged(nameof(Address2_AddressTypeCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: City
        ///     (Russian - 1049): Адрес 2: город
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the city for the secondary address.
        ///     (Russian - 1049): Введите город для дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_city)]
        [System.ComponentModel.DescriptionAttribute("Address 2: City")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_City
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_city);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_City));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_city, value);
                this.OnPropertyChanged(nameof(Address2_City));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2
        ///     (Russian - 1049): Адрес 2
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the complete secondary address.
        ///     (Russian - 1049): Показывает полный дополнительный адрес.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_composite)]
        [System.ComponentModel.DescriptionAttribute("Address 2")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Composite
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_composite);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Country/Region
        ///     (Russian - 1049): Адрес 2: страна
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the country or region for the secondary address.
        ///     (Russian - 1049): Введите страну или регион для дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_country)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Country/Region")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Country
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_country);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Country));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_country, value);
                this.OnPropertyChanged(nameof(Address2_Country));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: County
        ///     (Russian - 1049): Адрес 2: округ
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the county for the secondary address.
        ///     (Russian - 1049): Введите район для дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_county)]
        [System.ComponentModel.DescriptionAttribute("Address 2: County")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_County
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_county);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_County));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_county, value);
                this.OnPropertyChanged(nameof(Address2_County));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Fax
        ///     (Russian - 1049): Адрес 2: факс
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the fax number associated with the secondary address.
        ///     (Russian - 1049): Введите номер факса, связанный с дополнительным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_fax)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Fax")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Fax
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_fax);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Fax));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_fax, value);
                this.OnPropertyChanged(nameof(Address2_Fax));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Freight Terms
        ///     (Russian - 1049): Адрес 2: условия поставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the freight terms for the secondary address to make sure shipping orders are processed correctly.
        ///     (Russian - 1049): Выберите условия поставки для дополнительного адреса, чтобы заказы на поставку обрабатывались правильно.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_freighttermscode)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Freight Terms")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue Address2_FreightTermsCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address2_freighttermscode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_FreightTermsCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_freighttermscode, value);
                this.OnPropertyChanged(nameof(Address2_FreightTermsCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Freight Terms
        ///     (Russian - 1049): Адрес 2: условия поставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the freight terms for the secondary address to make sure shipping orders are processed correctly.
        ///     (Russian - 1049): Выберите условия поставки для дополнительного адреса, чтобы заказы на поставку обрабатывались правильно.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_freighttermscode)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Freight Terms")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.address2_freighttermscode> Address2_FreightTermsCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address2_freighttermscode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address2_freighttermscode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.address2_freighttermscode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address2_freighttermscode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_FreightTermsCodeEnum));
                this.OnPropertyChanging(nameof(Address2_FreightTermsCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_freighttermscode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_freighttermscode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(Address2_FreightTermsCode));
                this.OnPropertyChanged(nameof(Address2_FreightTermsCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Latitude
        ///     (Russian - 1049): Адрес 2: широта
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the latitude value for the secondary address for use in mapping and other applications.
        ///     (Russian - 1049): Введите значение широты для дополнительного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_latitude)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Latitude")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<double> Address2_Latitude
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<double>>(RFB.Core.Entities.Account.Schema.Attributes.address2_latitude);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Latitude));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_latitude, value);
                this.OnPropertyChanged(nameof(Address2_Latitude));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Street 1
        ///     (Russian - 1049): Адрес 2: улица, дом (строка 1)
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the first line of the secondary address.
        ///     (Russian - 1049): Введите первую строку дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_line1)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Street 1")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Line1
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_line1);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Line1));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_line1, value);
                this.OnPropertyChanged(nameof(Address2_Line1));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Street 2
        ///     (Russian - 1049): Адрес 2: улица, дом (строка 2)
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the second line of the secondary address.
        ///     (Russian - 1049): Введите вторую строку дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_line2)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Street 2")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Line2
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_line2);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Line2));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_line2, value);
                this.OnPropertyChanged(nameof(Address2_Line2));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Street 3
        ///     (Russian - 1049): Адрес 2: улица, дом (строка 3)
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the third line of the secondary address.
        ///     (Russian - 1049): Введите третью строку дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_line3)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Street 3")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Line3
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_line3);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Line3));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_line3, value);
                this.OnPropertyChanged(nameof(Address2_Line3));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Longitude
        ///     (Russian - 1049): Адрес 2: долгота
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the longitude value for the secondary address for use in mapping and other applications.
        ///     (Russian - 1049): Введите значение долготы для дополнительного адреса. Оно будет использоваться в приложениях карт и других приложениях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_longitude)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Longitude")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<double> Address2_Longitude
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<double>>(RFB.Core.Entities.Account.Schema.Attributes.address2_longitude);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Longitude));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_longitude, value);
                this.OnPropertyChanged(nameof(Address2_Longitude));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Name
        ///     (Russian - 1049): Адрес 2: название
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a descriptive name for the secondary address, such as Corporate Headquarters.
        ///     (Russian - 1049): Введите информативное имя для дополнительного адреса (например, "Штаб-квартира корпорации").
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_name)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Name
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_name);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Name));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_name, value);
                this.OnPropertyChanged(nameof(Address2_Name));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: ZIP/Postal Code
        ///     (Russian - 1049): Адрес 2: почтовый индекс
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the ZIP Code or postal code for the secondary address.
        ///     (Russian - 1049): Введите почтовый индекс для дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_postalcode)]
        [System.ComponentModel.DescriptionAttribute("Address 2: ZIP/Postal Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_PostalCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_postalcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_PostalCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_postalcode, value);
                this.OnPropertyChanged(nameof(Address2_PostalCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Post Office Box
        ///     (Russian - 1049): Адрес 2: абонентский ящик
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the post office box number of the secondary address.
        ///     (Russian - 1049): Введите номер абонентского ящика для дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_postofficebox)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Post Office Box")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_PostOfficeBox
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_postofficebox);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_PostOfficeBox));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_postofficebox, value);
                this.OnPropertyChanged(nameof(Address2_PostOfficeBox));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Primary Contact Name
        ///     (Russian - 1049): Адрес 2: имя основного контакта
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the name of the main contact at the account's secondary address.
        ///     (Russian - 1049): Введите имя основного контакта для дополнительного адреса организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_primarycontactname)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Primary Contact Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_PrimaryContactName
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_primarycontactname);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_PrimaryContactName));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_primarycontactname, value);
                this.OnPropertyChanged(nameof(Address2_PrimaryContactName));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Shipping Method
        ///     (Russian - 1049): Адрес 2: способ поставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a shipping method for deliveries sent to this address.
        ///     (Russian - 1049): Выберите метод поставки для доставок по этому адресу.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_shippingmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Shipping Method")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue Address2_ShippingMethodCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address2_shippingmethodcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_ShippingMethodCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_shippingmethodcode, value);
                this.OnPropertyChanged(nameof(Address2_ShippingMethodCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Shipping Method
        ///     (Russian - 1049): Адрес 2: способ поставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a shipping method for deliveries sent to this address.
        ///     (Russian - 1049): Выберите метод поставки для доставок по этому адресу.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_shippingmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Shipping Method")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.address2_shippingmethodcode> Address2_ShippingMethodCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.address2_shippingmethodcode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address2_shippingmethodcode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.address2_shippingmethodcode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.address2_shippingmethodcode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_ShippingMethodCodeEnum));
                this.OnPropertyChanging(nameof(Address2_ShippingMethodCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_shippingmethodcode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_shippingmethodcode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(Address2_ShippingMethodCode));
                this.OnPropertyChanged(nameof(Address2_ShippingMethodCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: State/Province
        ///     (Russian - 1049): Адрес 2: область, край, республика
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the state or province of the secondary address.
        ///     (Russian - 1049): Введите область или республику для дополнительного адреса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_stateorprovince)]
        [System.ComponentModel.DescriptionAttribute("Address 2: State/Province")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_StateOrProvince
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_stateorprovince);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_StateOrProvince));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_stateorprovince, value);
                this.OnPropertyChanged(nameof(Address2_StateOrProvince));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Telephone 1
        ///     (Russian - 1049): Адрес 2: телефон 1
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the main phone number associated with the secondary address.
        ///     (Russian - 1049): Введите основной номер телефона, связанный с дополнительным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone1)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Telephone 1")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Telephone1
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone1);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Telephone1));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone1, value);
                this.OnPropertyChanged(nameof(Address2_Telephone1));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Telephone 2
        ///     (Russian - 1049): Адрес 2: телефон 2
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a second phone number associated with the secondary address.
        ///     (Russian - 1049): Введите второй номер телефона, связанный с дополнительным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone2)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Telephone 2")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Telephone2
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone2);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Telephone2));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone2, value);
                this.OnPropertyChanged(nameof(Address2_Telephone2));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: Telephone 3
        ///     (Russian - 1049): Адрес 2: телефон 3
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a third phone number associated with the secondary address.
        ///     (Russian - 1049): Введите третий номер телефона, связанный с дополнительным адресом.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone3)]
        [System.ComponentModel.DescriptionAttribute("Address 2: Telephone 3")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_Telephone3
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone3);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_Telephone3));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_telephone3, value);
                this.OnPropertyChanged(nameof(Address2_Telephone3));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: UPS Zone
        ///     (Russian - 1049): Адрес 2: зона UPS
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
        ///     (Russian - 1049): Введите зону UPS дополнительного адреса, чтобы доставка с помощью службы UPS осуществлялась быстро, а расходы на доставку рассчитывались правильно.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_upszone)]
        [System.ComponentModel.DescriptionAttribute("Address 2: UPS Zone")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Address2_UPSZone
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.address2_upszone);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_UPSZone));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_upszone, value);
                this.OnPropertyChanged(nameof(Address2_UPSZone));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Address 2: UTC Offset
        ///     (Russian - 1049): Адрес 2: часовой пояс
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
        ///     (Russian - 1049): Выберите часовой пояс (или отклонение от UTC) для этого адреса, чтобы другие пользователи могли учитывать его, связываясь с кем-нибудь по этому адресу.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.address2_utcoffset)]
        [System.ComponentModel.DescriptionAttribute("Address 2: UTC Offset")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> Address2_UTCOffset
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.address2_utcoffset);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Address2_UTCOffset));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.address2_utcoffset, value);
                this.OnPropertyChanged(nameof(Address2_UTCOffset));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Aging 30
        ///     (Russian - 1049): Срок оплаты 30
        /// 
        /// Description:
        ///     (English - United States - 1033): For system use only.
        ///     (Russian - 1049): Только для системного использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.aging30)]
        [System.ComponentModel.DescriptionAttribute("Aging 30")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Aging30
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.aging30);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Aging 30 (Base)
        ///     (Russian - 1049): Срок оплаты 30 (базовый)
        /// 
        /// Description:
        ///     (English - United States - 1033): The base currency equivalent of the aging 30 field.
        ///     (Russian - 1049): Эквивалент срока оплаты 30 в базовой валюте.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.aging30_base)]
        [System.ComponentModel.DescriptionAttribute("Aging 30 (Base)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Aging30_Base
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.aging30_base);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Aging 60
        ///     (Russian - 1049): Срок оплаты 60
        /// 
        /// Description:
        ///     (English - United States - 1033): For system use only.
        ///     (Russian - 1049): Только для системного использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.aging60)]
        [System.ComponentModel.DescriptionAttribute("Aging 60")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Aging60
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.aging60);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Aging 60 (Base)
        ///     (Russian - 1049): Срок оплаты 60 (базовый)
        /// 
        /// Description:
        ///     (English - United States - 1033): The base currency equivalent of the aging 60 field.
        ///     (Russian - 1049): Эквивалент срока оплаты 60 в базовой валюте.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.aging60_base)]
        [System.ComponentModel.DescriptionAttribute("Aging 60 (Base)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Aging60_Base
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.aging60_base);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Aging 90
        ///     (Russian - 1049): Срок оплаты 90
        /// 
        /// Description:
        ///     (English - United States - 1033): For system use only.
        ///     (Russian - 1049): Только для системного использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.aging90)]
        [System.ComponentModel.DescriptionAttribute("Aging 90")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Aging90
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.aging90);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Aging 90 (Base)
        ///     (Russian - 1049): Срок оплаты 90 (базовый)
        /// 
        /// Description:
        ///     (English - United States - 1033): The base currency equivalent of the aging 90 field.
        ///     (Russian - 1049): Эквивалент срока оплаты 90 в базовой валюте.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.aging90_base)]
        [System.ComponentModel.DescriptionAttribute("Aging 90 (Base)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Aging90_Base
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.aging90_base);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Business Type
        ///     (Russian - 1049): Тип бизнеса
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the legal designation or other business type of the account for contracts or reporting purposes.
        ///     (Russian - 1049): Выберите организационно-правовую форму или другой вид деятельности для данной организации, используемый в целях отчетности или для контрактов.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.businesstypecode)]
        [System.ComponentModel.DescriptionAttribute("Business Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue BusinessTypeCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.businesstypecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(BusinessTypeCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.businesstypecode, value);
                this.OnPropertyChanged(nameof(BusinessTypeCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Business Type
        ///     (Russian - 1049): Тип бизнеса
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the legal designation or other business type of the account for contracts or reporting purposes.
        ///     (Russian - 1049): Выберите организационно-правовую форму или другой вид деятельности для данной организации, используемый в целях отчетности или для контрактов.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.businesstypecode)]
        [System.ComponentModel.DescriptionAttribute("Business Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.businesstypecode> BusinessTypeCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.businesstypecode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.businesstypecode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.businesstypecode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.businesstypecode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(BusinessTypeCodeEnum));
                this.OnPropertyChanging(nameof(BusinessTypeCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.businesstypecode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.businesstypecode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(BusinessTypeCode));
                this.OnPropertyChanged(nameof(BusinessTypeCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created By
        ///     (Russian - 1049): Создано
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows who created the record.
        ///     (Russian - 1049): Показывает, кто создал запись.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.createdby)]
        [System.ComponentModel.DescriptionAttribute("Created By")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference CreatedBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.createdby);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created By (External Party)
        ///     (Russian - 1049): Создано (внешняя сторона)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the external party who created the record.
        ///     (Russian - 1049): Показывает внешнюю сторону, создавшую запись.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.createdbyexternalparty)]
        [System.ComponentModel.DescriptionAttribute("Created By (External Party)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference CreatedByExternalParty
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.createdbyexternalparty);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created On
        ///     (Russian - 1049): Дата создания
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        ///     (Russian - 1049): Показывает дату и время, в которые была создана запись. Дата и время отображаются для часового пояса, выбранного в параметрах Microsoft Dynamics 365.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.createdon)]
        [System.ComponentModel.DescriptionAttribute("Created On")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> CreatedOn
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(RFB.Core.Entities.Account.Schema.Attributes.createdon);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created By (Delegate)
        ///     (Russian - 1049): Кем создано (делегат)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows who created the record on behalf of another user.
        ///     (Russian - 1049): Показывает, кто создал запись от имени другого пользователя.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.createdonbehalfby)]
        [System.ComponentModel.DescriptionAttribute("Created By (Delegate)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.createdonbehalfby);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Credit Limit
        ///     (Russian - 1049): Кредитный лимит
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the credit limit of the account. This is a useful reference when you address invoice and accounting issues with the customer.
        ///     (Russian - 1049): Введите кредитный лимит организации. Он будет полезен при решении связанных со счетами и бухгалтерским учетом вопросов по данному клиенту.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.creditlimit)]
        [System.ComponentModel.DescriptionAttribute("Credit Limit")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money CreditLimit
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.creditlimit);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(CreditLimit));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.creditlimit, value);
                this.OnPropertyChanged(nameof(CreditLimit));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Credit Limit (Base)
        ///     (Russian - 1049): Кредитный лимит (базовый)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the credit limit converted to the system's default base currency for reporting purposes.
        ///     (Russian - 1049): Показывает кредитный лимит, преобразованный в системную базовую валюту по умолчанию в целях отчетности.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.creditlimit_base)]
        [System.ComponentModel.DescriptionAttribute("Credit Limit (Base)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money CreditLimit_Base
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.creditlimit_base);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Credit Hold
        ///     (Russian - 1049): Возможность кредита
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the credit for the account is on hold. This is a useful reference while addressing the invoice and accounting issues with the customer.
        ///     (Russian - 1049): Укажите, приостановлен ли кредит для организации. Это полезная информация при решении связанных со счетами и бухгалтерским учетом вопросов по данному клиенту.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.creditonhold)]
        [System.ComponentModel.DescriptionAttribute("Credit Hold")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> CreditOnHold
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.creditonhold);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(CreditOnHold));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.creditonhold, value);
                this.OnPropertyChanged(nameof(CreditOnHold));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Customer Size
        ///     (Russian - 1049): Размер клиента
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the size category or range of the account for segmentation and reporting purposes.
        ///     (Russian - 1049): Выберите категорию или диапазон размеров организации в целях сегментирования и отчетности.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.customersizecode)]
        [System.ComponentModel.DescriptionAttribute("Customer Size")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue CustomerSizeCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.customersizecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(CustomerSizeCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.customersizecode, value);
                this.OnPropertyChanged(nameof(CustomerSizeCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Customer Size
        ///     (Russian - 1049): Размер клиента
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the size category or range of the account for segmentation and reporting purposes.
        ///     (Russian - 1049): Выберите категорию или диапазон размеров организации в целях сегментирования и отчетности.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.customersizecode)]
        [System.ComponentModel.DescriptionAttribute("Customer Size")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.customersizecode> CustomerSizeCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.customersizecode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.customersizecode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.customersizecode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.customersizecode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(CustomerSizeCodeEnum));
                this.OnPropertyChanging(nameof(CustomerSizeCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.customersizecode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.customersizecode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(CustomerSizeCode));
                this.OnPropertyChanged(nameof(CustomerSizeCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Relationship Type
        ///     (Russian - 1049): Тип отношений
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the category that best describes the relationship between the account and your organization.
        ///     (Russian - 1049): Выберите категорию, которая наилучшим образом описывает отношения между данной организацией и вашей организацией.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.customertypecode)]
        [System.ComponentModel.DescriptionAttribute("Relationship Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue CustomerTypeCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.customertypecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(CustomerTypeCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.customertypecode, value);
                this.OnPropertyChanged(nameof(CustomerTypeCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Relationship Type
        ///     (Russian - 1049): Тип отношений
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the category that best describes the relationship between the account and your organization.
        ///     (Russian - 1049): Выберите категорию, которая наилучшим образом описывает отношения между данной организацией и вашей организацией.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.customertypecode)]
        [System.ComponentModel.DescriptionAttribute("Relationship Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.customertypecode> CustomerTypeCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.customertypecode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.customertypecode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.customertypecode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.customertypecode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(CustomerTypeCodeEnum));
                this.OnPropertyChanging(nameof(CustomerTypeCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.customertypecode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.customertypecode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(CustomerTypeCode));
                this.OnPropertyChanged(nameof(CustomerTypeCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Price List
        ///     (Russian - 1049): Прайс-лист
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the default price list associated with the account to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.
        ///     (Russian - 1049): Выбор прайс-листа по умолчанию, связанного с организацией, чтобы в возможных сделках, предложениях с расценками и заказах для этого клиента использовались правильные цены на продукты.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.defaultpricelevelid)]
        [System.ComponentModel.DescriptionAttribute("Price List")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference DefaultPriceLevelId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.defaultpricelevelid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DefaultPriceLevelId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.defaultpricelevelid, value);
                this.OnPropertyChanged(nameof(DefaultPriceLevelId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Description
        ///     (Russian - 1049): Описание
        /// 
        /// Description:
        ///     (English - United States - 1033): Type additional information to describe the account, such as an excerpt from the company's website.
        ///     (Russian - 1049): Введите дополнительные сведения, описывающие организацию, например отрывок из описания на веб-сайте компании.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.description)]
        [System.ComponentModel.DescriptionAttribute("Description")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Description
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.description);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Description));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.description, value);
                this.OnPropertyChanged(nameof(Description));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Do not allow Bulk Emails
        ///     (Russian - 1049): Запретить рассылку по электронной почте
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the account allows bulk email sent through campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but is excluded from email.
        ///     (Russian - 1049): Укажите, разрешена ли для организации массовая рассылка электронной почты при кампаниях. Если выбран вариант "Запретить", организацию можно добавлять в маркетинговые списки, но она исключается из рассылок электронной почты.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.donotbulkemail)]
        [System.ComponentModel.DescriptionAttribute("Do not allow Bulk Emails")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> DoNotBulkEMail
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.donotbulkemail);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DoNotBulkEMail));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.donotbulkemail, value);
                this.OnPropertyChanged(nameof(DoNotBulkEMail));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Do not allow Bulk Mails
        ///     (Russian - 1049): Запретить рассылку
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the account allows bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but will be excluded from the postal mail.
        ///     (Russian - 1049): Укажите, разрешена ли для организации групповая рассылка обычной почты при маркетинговых кампаниях или быстрых кампаниях. Если выбран вариант "Запретить", организацию можно добавлять в маркетинговые списки, но она исключается из рассылок обычной почты.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.donotbulkpostalmail)]
        [System.ComponentModel.DescriptionAttribute("Do not allow Bulk Mails")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> DoNotBulkPostalMail
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.donotbulkpostalmail);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DoNotBulkPostalMail));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.donotbulkpostalmail, value);
                this.OnPropertyChanged(nameof(DoNotBulkPostalMail));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Do not allow Emails
        ///     (Russian - 1049): Запретить электронную почту
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the account allows direct email sent from Microsoft Dynamics 365.
        ///     (Russian - 1049): Укажите, разрешена ли для организации рассылка электронной почты из Microsoft Dynamics 365.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.donotemail)]
        [System.ComponentModel.DescriptionAttribute("Do not allow Emails")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> DoNotEMail
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.donotemail);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DoNotEMail));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.donotemail, value);
                this.OnPropertyChanged(nameof(DoNotEMail));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Do not allow Faxes
        ///     (Russian - 1049): Запретить факсы
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the account allows faxes. If Do Not Allow is selected, the account will be excluded from fax activities distributed in marketing campaigns.
        ///     (Russian - 1049): Укажите, разрешена ли для организации отправка факсов. Если выбран вариант "Запретить", организация исключается из действий по рассылке факсов при маркетинговых кампаниях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.donotfax)]
        [System.ComponentModel.DescriptionAttribute("Do not allow Faxes")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> DoNotFax
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.donotfax);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DoNotFax));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.donotfax, value);
                this.OnPropertyChanged(nameof(DoNotFax));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Do not allow Phone Calls
        ///     (Russian - 1049): Запретить звонки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the account allows phone calls. If Do Not Allow is selected, the account will be excluded from phone call activities distributed in marketing campaigns.
        ///     (Russian - 1049): Укажите, разрешены ли для организации телефонные звонки. Если выбран вариант "Запретить", организация исключается из действий с телефонными звонками при маркетинговых кампаниях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.donotphone)]
        [System.ComponentModel.DescriptionAttribute("Do not allow Phone Calls")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> DoNotPhone
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.donotphone);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DoNotPhone));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.donotphone, value);
                this.OnPropertyChanged(nameof(DoNotPhone));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Do not allow Mails
        ///     (Russian - 1049): Запретить почту
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the account allows direct mail. If Do Not Allow is selected, the account will be excluded from letter activities distributed in marketing campaigns.
        ///     (Russian - 1049): Укажите, разрешена ли для организации прямая рассылка. Если выбран вариант "Запретить", организация исключается из действий по рассылке писем при маркетинговых кампаниях.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.donotpostalmail)]
        [System.ComponentModel.DescriptionAttribute("Do not allow Mails")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> DoNotPostalMail
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.donotpostalmail);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DoNotPostalMail));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.donotpostalmail, value);
                this.OnPropertyChanged(nameof(DoNotPostalMail));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Send Marketing Materials
        ///     (Russian - 1049): Отправка маркетинговых материалов
        /// 
        /// Description:
        ///     (English - United States - 1033): Select whether the account accepts marketing materials, such as brochures or catalogs.
        ///     (Russian - 1049): Укажите, принимает ли организация маркетинговые материалы, такие как брошюры или каталоги.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.donotsendmm)]
        [System.ComponentModel.DescriptionAttribute("Send Marketing Materials")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> DoNotSendMM
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.donotsendmm);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(DoNotSendMM));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.donotsendmm, value);
                this.OnPropertyChanged(nameof(DoNotSendMM));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Email
        ///     (Russian - 1049): Электронная почта
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the primary email address for the account.
        ///     (Russian - 1049): Введите основной адрес электронной почты для организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.emailaddress1)]
        [System.ComponentModel.DescriptionAttribute("Email")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EMailAddress1
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.emailaddress1);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(EMailAddress1));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.emailaddress1, value);
                this.OnPropertyChanged(nameof(EMailAddress1));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Email Address 2
        ///     (Russian - 1049): Адрес электронной почты 2
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the secondary email address for the account.
        ///     (Russian - 1049): Введите дополнительный адрес электронной почты для организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.emailaddress2)]
        [System.ComponentModel.DescriptionAttribute("Email Address 2")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EMailAddress2
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.emailaddress2);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(EMailAddress2));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.emailaddress2, value);
                this.OnPropertyChanged(nameof(EMailAddress2));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Email Address 3
        ///     (Russian - 1049): Адрес электронной почты 3
        /// 
        /// Description:
        ///     (English - United States - 1033): Type an alternate email address for the account.
        ///     (Russian - 1049): Введите альтернативный адрес электронной почты для организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.emailaddress3)]
        [System.ComponentModel.DescriptionAttribute("Email Address 3")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EMailAddress3
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.emailaddress3);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(EMailAddress3));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.emailaddress3, value);
                this.OnPropertyChanged(nameof(EMailAddress3));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Default Image
        ///     (Russian - 1049): Изображение по умолчанию
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the default image for the record.
        ///     (Russian - 1049): Показывает изображение по умолчанию для данной записи.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.entityimage)]
        [System.ComponentModel.DescriptionAttribute("Default Image")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public byte[] EntityImage
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<byte[]>(RFB.Core.Entities.Account.Schema.Attributes.entityimage);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(EntityImage));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.entityimage, value);
                this.OnPropertyChanged(nameof(EntityImage));
            }
        }
        
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.entityimage_timestamp)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<long> EntityImage_Timestamp
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>(RFB.Core.Entities.Account.Schema.Attributes.entityimage_timestamp);
            }
        }
        
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.entityimage_url)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EntityImage_URL
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.entityimage_url);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Entity Image Id
        ///     (Russian - 1049): Код изображения сущности
        /// 
        /// Description:
        ///     (English - United States - 1033): For internal use only.
        ///     (Russian - 1049): Только для внутреннего использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.entityimageid)]
        [System.ComponentModel.DescriptionAttribute("Entity Image Id")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> EntityImageId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(RFB.Core.Entities.Account.Schema.Attributes.entityimageid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Exchange Rate
        ///     (Russian - 1049): Валютный курс
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        ///     (Russian - 1049): Показывает обменный курс валюты записи. Этот валютный курс используется для преобразования всех денежных полей в записи из локальной валюты в валюту системы по умолчанию.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.exchangerate)]
        [System.ComponentModel.DescriptionAttribute("Exchange Rate")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<decimal> ExchangeRate
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<decimal>>(RFB.Core.Entities.Account.Schema.Attributes.exchangerate);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Fax
        ///     (Russian - 1049): Факс
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the fax number for the account.
        ///     (Russian - 1049): Введите номер факса для организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.fax)]
        [System.ComponentModel.DescriptionAttribute("Fax")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Fax
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.fax);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Fax));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.fax, value);
                this.OnPropertyChanged(nameof(Fax));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Follow Email Activity
        ///     (Russian - 1049): Действие отслеживания эл. почты
        /// 
        /// Description:
        ///     (English - United States - 1033): Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the account.
        ///     (Russian - 1049): Сведения о том, разрешены ли действия отслеживания электронной почты, такие как открытия, просмотры вложений и щелчки по ссылкам для сообщений эл. почты, отправленных организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.followemail)]
        [System.ComponentModel.DescriptionAttribute("Follow Email Activity")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> FollowEmail
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.followemail);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(FollowEmail));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.followemail, value);
                this.OnPropertyChanged(nameof(FollowEmail));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): FTP Site
        ///     (Russian - 1049): FTP-сайт
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the URL for the account's FTP site to enable users to access data and share documents.
        ///     (Russian - 1049): Введите URL-адрес для FTP-сайта организации, чтобы пользователи получили доступ к данным и могли обмениваться документами.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.ftpsiteurl)]
        [System.ComponentModel.DescriptionAttribute("FTP Site")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FtpSiteURL
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.ftpsiteurl);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(FtpSiteURL));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.ftpsiteurl, value);
                this.OnPropertyChanged(nameof(FtpSiteURL));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Multi Select Picklist
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist)]
        [System.ComponentModel.DescriptionAttribute("Multi Select Picklist")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValueCollection gbc_MultiSelectPicklist
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValueCollection collection = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValueCollection>(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist);
                if ((collection == null))
                {
                    collection = new Microsoft.Xrm.Sdk.OptionSetValueCollection();
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist, collection);
                }
                return collection;
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(gbc_MultiSelectPicklist));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist, value);
                this.OnPropertyChanged(nameof(gbc_MultiSelectPicklist));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Multi Select Picklist
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist)]
        [System.ComponentModel.DescriptionAttribute("Multi Select Picklist")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Collections.Generic.IEnumerable<RFB.Core.GlobalOptionSets.gbc_multiselect> gbc_MultiSelectPicklistEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValueCollection optionSetValueCollection = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValueCollection>(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist);
                if ((optionSetValueCollection != null))
                {
                    return new System.Collections.Generic.List<RFB.Core.GlobalOptionSets.gbc_multiselect>(System.Linq.Enumerable.Distinct<RFB.Core.GlobalOptionSets.gbc_multiselect>(System.Linq.Enumerable.Select<Microsoft.Xrm.Sdk.OptionSetValue, RFB.Core.GlobalOptionSets.gbc_multiselect>(System.Linq.Enumerable.Where<Microsoft.Xrm.Sdk.OptionSetValue>(optionSetValueCollection, o => o != null && System.Enum.IsDefined(typeof(RFB.Core.GlobalOptionSets.gbc_multiselect), o.Value)), o => (RFB.Core.GlobalOptionSets.gbc_multiselect)(System.Enum.ToObject(typeof(RFB.Core.GlobalOptionSets.gbc_multiselect), o.Value)))));
                }
                else
                {
                    return System.Linq.Enumerable.Empty<RFB.Core.GlobalOptionSets.gbc_multiselect>();
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(gbc_MultiSelectPicklistEnum));
                this.OnPropertyChanging(nameof(gbc_MultiSelectPicklist));
                if (((value == null) 
                            || (System.Linq.Enumerable.Any<RFB.Core.GlobalOptionSets.gbc_multiselect>(value) == false)))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.gbc_multiselectpicklist, new Microsoft.Xrm.Sdk.OptionSetValueCollection(new System.Collections.Generic.List<Microsoft.Xrm.Sdk.OptionSetValue>(System.Linq.Enumerable.Select<RFB.Core.GlobalOptionSets.gbc_multiselect, Microsoft.Xrm.Sdk.OptionSetValue>(System.Linq.Enumerable.Distinct<RFB.Core.GlobalOptionSets.gbc_multiselect>(value), o => new Microsoft.Xrm.Sdk.OptionSetValue((int)o)))));
                }
                this.OnPropertyChanged(nameof(gbc_MultiSelectPicklist));
                this.OnPropertyChanged(nameof(gbc_MultiSelectPicklistEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Import Sequence Number
        ///     (Russian - 1049): Порядковый номер импорта
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the data import or data migration that created this record.
        ///     (Russian - 1049): Уникальный идентификатор импорта или переноса данных, создавшего эту запись.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.importsequencenumber)]
        [System.ComponentModel.DescriptionAttribute("Import Sequence Number")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> ImportSequenceNumber
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.importsequencenumber);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ImportSequenceNumber));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.importsequencenumber, value);
                this.OnPropertyChanged(nameof(ImportSequenceNumber));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Industry
        ///     (Russian - 1049): Отрасль
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the account's primary industry for use in marketing segmentation and demographic analysis.
        ///     (Russian - 1049): Выберите основную отрасль организации, которая будет использоваться при маркетинговом сегментировании и демографическом анализе.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.industrycode)]
        [System.ComponentModel.DescriptionAttribute("Industry")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue IndustryCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.industrycode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IndustryCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.industrycode, value);
                this.OnPropertyChanged(nameof(IndustryCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Industry
        ///     (Russian - 1049): Отрасль
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the account's primary industry for use in marketing segmentation and demographic analysis.
        ///     (Russian - 1049): Выберите основную отрасль организации, которая будет использоваться при маркетинговом сегментировании и демографическом анализе.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.industrycode)]
        [System.ComponentModel.DescriptionAttribute("Industry")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.industrycode> IndustryCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.industrycode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.industrycode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.industrycode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.industrycode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IndustryCodeEnum));
                this.OnPropertyChanging(nameof(IndustryCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.industrycode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.industrycode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(IndustryCode));
                this.OnPropertyChanged(nameof(IndustryCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Last On Hold Time
        ///     (Russian - 1049): Время последней приостановки
        /// 
        /// Description:
        ///     (English - United States - 1033): Contains the date and time stamp of the last on hold time.
        ///     (Russian - 1049): Содержит метку даты и времени последней приостановки.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.lastonholdtime)]
        [System.ComponentModel.DescriptionAttribute("Last On Hold Time")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> LastOnHoldTime
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(RFB.Core.Entities.Account.Schema.Attributes.lastonholdtime);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(LastOnHoldTime));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.lastonholdtime, value);
                this.OnPropertyChanged(nameof(LastOnHoldTime));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Last Date Included in Campaign
        ///     (Russian - 1049): Последняя дата, включенная в кампанию
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the date when the account was last included in a marketing campaign or quick campaign.
        ///     (Russian - 1049): Показывает дату последнего включения организации в маркетинговую кампанию или быструю кампанию.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.lastusedincampaign)]
        [System.ComponentModel.DescriptionAttribute("Last Date Included in Campaign")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> LastUsedInCampaign
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(RFB.Core.Entities.Account.Schema.Attributes.lastusedincampaign);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(LastUsedInCampaign));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.lastusedincampaign, value);
                this.OnPropertyChanged(nameof(LastUsedInCampaign));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Market Capitalization
        ///     (Russian - 1049): Капитализация рынка
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the market capitalization of the account to identify the company's equity, used as an indicator in financial performance analysis.
        ///     (Russian - 1049): Введите рыночную капитализацию организации; используется в качестве индикатора при анализе финансовых результатов.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.marketcap)]
        [System.ComponentModel.DescriptionAttribute("Market Capitalization")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money MarketCap
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.marketcap);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(MarketCap));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.marketcap, value);
                this.OnPropertyChanged(nameof(MarketCap));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Market Capitalization (Base)
        ///     (Russian - 1049): Рыночная капитализация (базовая)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the market capitalization converted to the system's default base currency.
        ///     (Russian - 1049): Показывает рыночную капитализацию, преобразованную в системную базовую валюту по умолчанию.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.marketcap_base)]
        [System.ComponentModel.DescriptionAttribute("Market Capitalization (Base)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money MarketCap_Base
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.marketcap_base);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Marketing Only
        ///     (Russian - 1049): Только для маркетинга
        /// 
        /// Description:
        ///     (English - United States - 1033): Whether is only for marketing
        ///     (Russian - 1049): Используется ли только в целях маркетинга
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.marketingonly)]
        [System.ComponentModel.DescriptionAttribute("Marketing Only")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> MarketingOnly
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.marketingonly);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(MarketingOnly));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.marketingonly, value);
                this.OnPropertyChanged(nameof(MarketingOnly));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Master ID
        ///     (Russian - 1049): Основной идентификатор
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the master account that the account was merged with.
        ///     (Russian - 1049): Указывает главную организацию, с которой была объединена эта организация.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.masterid)]
        [System.ComponentModel.DescriptionAttribute("Master ID")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference MasterId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.masterid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Merged
        ///     (Russian - 1049): Документ слияния
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows whether the account has been merged with another account.
        ///     (Russian - 1049): Показывает, было ли выполнено слияние этой организации с другой.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.merged)]
        [System.ComponentModel.DescriptionAttribute("Merged")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> Merged
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.merged);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Modified By
        ///     (Russian - 1049): Изменено
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows who last updated the record.
        ///     (Russian - 1049): Показывает, кто последний обновил запись.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.modifiedby)]
        [System.ComponentModel.DescriptionAttribute("Modified By")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.modifiedby);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Modified By (External Party)
        ///     (Russian - 1049): Изменено (внешняя сторона)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the external party who modified the record.
        ///     (Russian - 1049): Показывает внешнюю сторону, изменившую запись.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.modifiedbyexternalparty)]
        [System.ComponentModel.DescriptionAttribute("Modified By (External Party)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedByExternalParty
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.modifiedbyexternalparty);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Modified On
        ///     (Russian - 1049): Дата изменения
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        ///     (Russian - 1049): Показывает дату и время последнего обновления записи. Дата и время отображаются для часового пояса, выбранного в параметрах Microsoft Dynamics 365.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.modifiedon)]
        [System.ComponentModel.DescriptionAttribute("Modified On")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> ModifiedOn
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(RFB.Core.Entities.Account.Schema.Attributes.modifiedon);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Modified By (Delegate)
        ///     (Russian - 1049): Кем изменено (делегат)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows who created the record on behalf of another user.
        ///     (Russian - 1049): Показывает, кто создал запись от имени другого пользователя.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.modifiedonbehalfby)]
        [System.ComponentModel.DescriptionAttribute("Modified By (Delegate)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.modifiedonbehalfby);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Number of Employees
        ///     (Russian - 1049): Количество сотрудников
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the number of employees that work at the account for use in marketing segmentation and demographic analysis.
        ///     (Russian - 1049): Введите число сотрудников, работающих в организации, для использования при маркетинговом сегментировании и демографическом анализе.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.numberofemployees)]
        [System.ComponentModel.DescriptionAttribute("Number of Employees")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> NumberOfEmployees
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.numberofemployees);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(NumberOfEmployees));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.numberofemployees, value);
                this.OnPropertyChanged(nameof(NumberOfEmployees));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): On Hold Time (Minutes)
        ///     (Russian - 1049): Время приостановки (мин.)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows how long, in minutes, that the record was on hold.
        ///     (Russian - 1049): Указывает длительность приостановки записи.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.onholdtime)]
        [System.ComponentModel.DescriptionAttribute("On Hold Time (Minutes)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> OnHoldTime
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.onholdtime);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Open Deals
        ///     (Russian - 1049): Открытые сделки
        /// 
        /// Description:
        ///     (English - United States - 1033): Number of open opportunities against an account and its child accounts.
        ///     (Russian - 1049): Число открытых возможных сделок по организации и ее дочерним организациям.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.opendeals)]
        [System.ComponentModel.DescriptionAttribute("Open Deals")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> OpenDeals
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.opendeals);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Open Deals (Last Updated On)
        ///     (Russian - 1049): {0} (обновлялось последний раз)
        /// 
        /// Description:
        ///     (English - United States - 1033): Last Updated time of rollup field Open Deals.
        ///     (Russian - 1049): Время последнего обновления поля свертки {0}.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.opendeals_date)]
        [System.ComponentModel.DescriptionAttribute("Open Deals (Last Updated On)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> OpenDeals_Date
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(RFB.Core.Entities.Account.Schema.Attributes.opendeals_date);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Open Deals (State)
        ///     (Russian - 1049): {0} (Состояние)
        /// 
        /// Description:
        ///     (English - United States - 1033): State of rollup field Open Deals.
        ///     (Russian - 1049): Состояние поля свертки {0}.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.opendeals_state)]
        [System.ComponentModel.DescriptionAttribute("Open Deals (State)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> OpenDeals_State
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.opendeals_state);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Open Revenue
        ///     (Russian - 1049): Открытый доход
        /// 
        /// Description:
        ///     (English - United States - 1033): Sum of open revenue against an account and its child accounts.
        ///     (Russian - 1049): Сумма открытых доходов по организации и ее дочерним организациям.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.openrevenue)]
        [System.ComponentModel.DescriptionAttribute("Open Revenue")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money OpenRevenue
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.openrevenue);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Open Revenue (Base)
        ///     (Russian - 1049): {0} (базовая)
        /// 
        /// Description:
        ///     (English - United States - 1033): Value of the Open Revenue in base currency.
        ///     (Russian - 1049): Значение поля {0} в базовой валюте.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.openrevenue_base)]
        [System.ComponentModel.DescriptionAttribute("Open Revenue (Base)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money OpenRevenue_Base
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.openrevenue_base);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Open Revenue (Last Updated On)
        ///     (Russian - 1049): {0} (обновлялось последний раз)
        /// 
        /// Description:
        ///     (English - United States - 1033): Last Updated time of rollup field Open Revenue.
        ///     (Russian - 1049): Время последнего обновления поля свертки {0}.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.openrevenue_date)]
        [System.ComponentModel.DescriptionAttribute("Open Revenue (Last Updated On)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> OpenRevenue_Date
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(RFB.Core.Entities.Account.Schema.Attributes.openrevenue_date);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Open Revenue (State)
        ///     (Russian - 1049): {0} (Состояние)
        /// 
        /// Description:
        ///     (English - United States - 1033): State of rollup field Open Revenue.
        ///     (Russian - 1049): Состояние поля свертки {0}.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.openrevenue_state)]
        [System.ComponentModel.DescriptionAttribute("Open Revenue (State)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> OpenRevenue_State
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.openrevenue_state);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Originating Lead
        ///     (Russian - 1049): Источник интереса
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the lead that the account was created from if the account was created by converting a lead in Microsoft Dynamics 365. This is used to relate the account to data on the originating lead for use in reporting and analytics.
        ///     (Russian - 1049): Отображение интереса, из которого была создана организация, если она создана посредством преобразования интереса в Microsoft Dynamics 365. Эта информация используется для связи организации с данными по исходному интересу для задач отчетности и аналитики.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.originatingleadid)]
        [System.ComponentModel.DescriptionAttribute("Originating Lead")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference OriginatingLeadId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.originatingleadid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(OriginatingLeadId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.originatingleadid, value);
                this.OnPropertyChanged(nameof(OriginatingLeadId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Record Created On
        ///     (Russian - 1049): Дата создания записи
        /// 
        /// Description:
        ///     (English - United States - 1033): Date and time that the record was migrated.
        ///     (Russian - 1049): Дата и время переноса записи.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.overriddencreatedon)]
        [System.ComponentModel.DescriptionAttribute("Record Created On")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> OverriddenCreatedOn
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(RFB.Core.Entities.Account.Schema.Attributes.overriddencreatedon);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(OverriddenCreatedOn));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.overriddencreatedon, value);
                this.OnPropertyChanged(nameof(OverriddenCreatedOn));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Owner
        ///     (Russian - 1049): Ответственный
        /// 
        /// Description:
        ///     (English - United States - 1033): Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
        ///     (Russian - 1049): Введите пользователя или рабочую группу, которым назначено управление записью. Это поле обновляется при каждом назначении записи другому пользователю.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.ownerid)]
        [System.ComponentModel.DescriptionAttribute("Owner")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference OwnerId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.ownerid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(OwnerId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.ownerid, value);
                this.OnPropertyChanged(nameof(OwnerId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Ownership
        ///     (Russian - 1049): Тип собственности
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the account's ownership structure, such as public or private.
        ///     (Russian - 1049): Введите тип собственности компании - открытый или закрытый.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.ownershipcode)]
        [System.ComponentModel.DescriptionAttribute("Ownership")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue OwnershipCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.ownershipcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(OwnershipCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.ownershipcode, value);
                this.OnPropertyChanged(nameof(OwnershipCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Ownership
        ///     (Russian - 1049): Тип собственности
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the account's ownership structure, such as public or private.
        ///     (Russian - 1049): Введите тип собственности компании - открытый или закрытый.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.ownershipcode)]
        [System.ComponentModel.DescriptionAttribute("Ownership")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.ownershipcode> OwnershipCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.ownershipcode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.ownershipcode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.ownershipcode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.ownershipcode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(OwnershipCodeEnum));
                this.OnPropertyChanging(nameof(OwnershipCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.ownershipcode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.ownershipcode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(OwnershipCode));
                this.OnPropertyChanged(nameof(OwnershipCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Owning Business Unit
        ///     (Russian - 1049): Ответственная бизнес-единица
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the business unit that the record owner belongs to.
        ///     (Russian - 1049): Указывает бизнес-единицу, к которой принадлежит ответственный за запись.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.owningbusinessunit)]
        [System.ComponentModel.DescriptionAttribute("Owning Business Unit")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference OwningBusinessUnit
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.owningbusinessunit);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Owning Team
        ///     (Russian - 1049): Ответственная рабочая группа
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the team who owns the account.
        ///     (Russian - 1049): Уникальный идентификатор рабочей группы, ответственной за организацию.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.owningteam)]
        [System.ComponentModel.DescriptionAttribute("Owning Team")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference OwningTeam
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.owningteam);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Owning User
        ///     (Russian - 1049): Ответственный пользователь
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the user who owns the account.
        ///     (Russian - 1049): Уникальный идентификатор пользователя, ответственного за организацию.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.owninguser)]
        [System.ComponentModel.DescriptionAttribute("Owning User")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference OwningUser
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.owninguser);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Parent Account
        ///     (Russian - 1049): Головная организация
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the parent account associated with this account to show parent and child businesses in reporting and analytics.
        ///     (Russian - 1049): Выберите головную организацию, связанную с этой организацией, для правильного отображения родительских и дочерних предприятий в отчетах и аналитике.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.parentaccountid)]
        [System.ComponentModel.DescriptionAttribute("Parent Account")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference ParentAccountId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.parentaccountid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ParentAccountId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.parentaccountid, value);
                this.OnPropertyChanged(nameof(ParentAccountId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Participates in Workflow
        ///     (Russian - 1049): Участвует в бизнес-процессах
        /// 
        /// Description:
        ///     (English - United States - 1033): For system use only. Legacy Microsoft Dynamics CRM 3.0 workflow data.
        ///     (Russian - 1049): Только для системного использования. Данные бизнес-процесса предыдущей версии Microsoft Dynamics CRM 3.0.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.participatesinworkflow)]
        [System.ComponentModel.DescriptionAttribute("Participates in Workflow")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> ParticipatesInWorkflow
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(RFB.Core.Entities.Account.Schema.Attributes.participatesinworkflow);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ParticipatesInWorkflow));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.participatesinworkflow, value);
                this.OnPropertyChanged(nameof(ParticipatesInWorkflow));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Payment Terms
        ///     (Russian - 1049): Условия оплаты
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the payment terms to indicate when the customer needs to pay the total amount.
        ///     (Russian - 1049): Выберите условия оплаты, чтобы указать, должен ли клиент уплатить всю сумму.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.paymenttermscode)]
        [System.ComponentModel.DescriptionAttribute("Payment Terms")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue PaymentTermsCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.paymenttermscode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PaymentTermsCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.paymenttermscode, value);
                this.OnPropertyChanged(nameof(PaymentTermsCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Payment Terms
        ///     (Russian - 1049): Условия оплаты
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the payment terms to indicate when the customer needs to pay the total amount.
        ///     (Russian - 1049): Выберите условия оплаты, чтобы указать, должен ли клиент уплатить всю сумму.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.paymenttermscode)]
        [System.ComponentModel.DescriptionAttribute("Payment Terms")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.paymenttermscode> PaymentTermsCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.paymenttermscode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.paymenttermscode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.paymenttermscode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.paymenttermscode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PaymentTermsCodeEnum));
                this.OnPropertyChanging(nameof(PaymentTermsCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.paymenttermscode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.paymenttermscode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(PaymentTermsCode));
                this.OnPropertyChanged(nameof(PaymentTermsCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Day
        ///     (Russian - 1049): Основной день
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the preferred day of the week for service appointments.
        ///     (Russian - 1049): Выберите предпочтительный день недели для сервисных встреч.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmentdaycode)]
        [System.ComponentModel.DescriptionAttribute("Preferred Day")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue PreferredAppointmentDayCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmentdaycode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredAppointmentDayCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmentdaycode, value);
                this.OnPropertyChanged(nameof(PreferredAppointmentDayCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Day
        ///     (Russian - 1049): Основной день
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the preferred day of the week for service appointments.
        ///     (Russian - 1049): Выберите предпочтительный день недели для сервисных встреч.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmentdaycode)]
        [System.ComponentModel.DescriptionAttribute("Preferred Day")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmentdaycode> PreferredAppointmentDayCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmentdaycode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmentdaycode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmentdaycode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmentdaycode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredAppointmentDayCodeEnum));
                this.OnPropertyChanging(nameof(PreferredAppointmentDayCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmentdaycode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmentdaycode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(PreferredAppointmentDayCode));
                this.OnPropertyChanged(nameof(PreferredAppointmentDayCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Time
        ///     (Russian - 1049): Основное время
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the preferred time of day for service appointments.
        ///     (Russian - 1049): Выберите предпочтительное время суток для сервисных встреч.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmenttimecode)]
        [System.ComponentModel.DescriptionAttribute("Preferred Time")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue PreferredAppointmentTimeCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmenttimecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredAppointmentTimeCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmenttimecode, value);
                this.OnPropertyChanged(nameof(PreferredAppointmentTimeCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Time
        ///     (Russian - 1049): Основное время
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the preferred time of day for service appointments.
        ///     (Russian - 1049): Выберите предпочтительное время суток для сервисных встреч.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmenttimecode)]
        [System.ComponentModel.DescriptionAttribute("Preferred Time")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmenttimecode> PreferredAppointmentTimeCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmenttimecode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmenttimecode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmenttimecode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.preferredappointmenttimecode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredAppointmentTimeCodeEnum));
                this.OnPropertyChanging(nameof(PreferredAppointmentTimeCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmenttimecode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredappointmenttimecode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(PreferredAppointmentTimeCode));
                this.OnPropertyChanged(nameof(PreferredAppointmentTimeCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Method of Contact
        ///     (Russian - 1049): Предпочтительный способ связи
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the preferred method of contact.
        ///     (Russian - 1049): Выберите предпочитаемый способ связи.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredcontactmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Preferred Method of Contact")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue PreferredContactMethodCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.preferredcontactmethodcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredContactMethodCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredcontactmethodcode, value);
                this.OnPropertyChanged(nameof(PreferredContactMethodCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Method of Contact
        ///     (Russian - 1049): Предпочтительный способ связи
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the preferred method of contact.
        ///     (Russian - 1049): Выберите предпочитаемый способ связи.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredcontactmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Preferred Method of Contact")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.preferredcontactmethodcode> PreferredContactMethodCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.preferredcontactmethodcode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.preferredcontactmethodcode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.preferredcontactmethodcode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.preferredcontactmethodcode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredContactMethodCodeEnum));
                this.OnPropertyChanging(nameof(PreferredContactMethodCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredcontactmethodcode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredcontactmethodcode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(PreferredContactMethodCode));
                this.OnPropertyChanged(nameof(PreferredContactMethodCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Facility/Equipment
        ///     (Russian - 1049): Основное помещение/оборудование
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the account's preferred service facility or equipment to make sure services are scheduled correctly for the customer.
        ///     (Russian - 1049): Выберите предпочитаемые помещение обслуживания или оборудование для организации, чтобы гарантировать правильное планирование сервиса для клиента.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredequipmentid)]
        [System.ComponentModel.DescriptionAttribute("Preferred Facility/Equipment")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference PreferredEquipmentId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.preferredequipmentid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredEquipmentId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredequipmentid, value);
                this.OnPropertyChanged(nameof(PreferredEquipmentId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred Service
        ///     (Russian - 1049): Основной сервис
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the account's preferred service for reference when you schedule service activities.
        ///     (Russian - 1049): Выберите предпочитаемый вариант обслуживания для организации. Используется в справочных целях при планировании действий сервиса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredserviceid)]
        [System.ComponentModel.DescriptionAttribute("Preferred Service")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference PreferredServiceId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.preferredserviceid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredServiceId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredserviceid, value);
                this.OnPropertyChanged(nameof(PreferredServiceId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Preferred User
        ///     (Russian - 1049): Основной пользователь
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the preferred service representative for reference when you schedule service activities for the account.
        ///     (Russian - 1049): Выберите предпочтительного представителя отдела обслуживания. Используется в справочных целях при планировании действий сервиса для организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.preferredsystemuserid)]
        [System.ComponentModel.DescriptionAttribute("Preferred User")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference PreferredSystemUserId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.preferredsystemuserid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PreferredSystemUserId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.preferredsystemuserid, value);
                this.OnPropertyChanged(nameof(PreferredSystemUserId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Primary Contact
        ///     (Russian - 1049): Основной контакт
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the primary contact for the account to provide quick access to contact details.
        ///     (Russian - 1049): Выберите основной контакт для организации, используемый для быстрого доступа к данным контакта.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.primarycontactid)]
        [System.ComponentModel.DescriptionAttribute("Primary Contact")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference PrimaryContactId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.primarycontactid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PrimaryContactId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.primarycontactid, value);
                this.OnPropertyChanged(nameof(PrimaryContactId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Primary Satori ID
        ///     (Russian - 1049): Основной идентификатор Satori
        /// 
        /// Description:
        ///     (English - United States - 1033): Primary Satori ID for Account
        ///     (Russian - 1049): Основной идентификатор Satori для учетной записи
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.primarysatoriid)]
        [System.ComponentModel.DescriptionAttribute("Primary Satori ID")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string PrimarySatoriId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.primarysatoriid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PrimarySatoriId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.primarysatoriid, value);
                this.OnPropertyChanged(nameof(PrimarySatoriId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Primary Twitter ID
        ///     (Russian - 1049): Основной идентификатор Twitter
        /// 
        /// Description:
        ///     (English - United States - 1033): Primary Twitter ID for Account
        ///     (Russian - 1049): Основной идентификатор Twitter для учетной записи
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.primarytwitterid)]
        [System.ComponentModel.DescriptionAttribute("Primary Twitter ID")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string PrimaryTwitterId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.primarytwitterid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PrimaryTwitterId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.primarytwitterid, value);
                this.OnPropertyChanged(nameof(PrimaryTwitterId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Process
        ///     (Russian - 1049): Процесс
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the ID of the process.
        ///     (Russian - 1049): Показывает идентификатор процесса.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.processid)]
        [System.ComponentModel.DescriptionAttribute("Process")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> ProcessId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(RFB.Core.Entities.Account.Schema.Attributes.processid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ProcessId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.processid, value);
                this.OnPropertyChanged(nameof(ProcessId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Annual Revenue
        ///     (Russian - 1049): Годовой доход
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the annual revenue for the account, used as an indicator in financial performance analysis.
        ///     (Russian - 1049): Введите годовой доход компании, используемый в качестве индикатора при анализе финансовых результатов.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.revenue)]
        [System.ComponentModel.DescriptionAttribute("Annual Revenue")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Revenue
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.revenue);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Revenue));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.revenue, value);
                this.OnPropertyChanged(nameof(Revenue));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Annual Revenue (Base)
        ///     (Russian - 1049): Годовой доход (базовый)
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the annual revenue converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.
        ///     (Russian - 1049): Показывает годовой доход, преобразованный в системную базовую валюту по умолчанию. При расчетах используется валютный курс, заданный в области "Валюты".
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.revenue_base)]
        [System.ComponentModel.DescriptionAttribute("Annual Revenue (Base)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.Money Revenue_Base
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.Money>(RFB.Core.Entities.Account.Schema.Attributes.revenue_base);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Shares Outstanding
        ///     (Russian - 1049): Общая сумма долей
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the number of shares available to the public for the account. This number is used as an indicator in financial performance analysis.
        ///     (Russian - 1049): Введите число акций организации в публичном обращении. Это число используется в качестве индикатора при анализе финансовых результатов.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.sharesoutstanding)]
        [System.ComponentModel.DescriptionAttribute("Shares Outstanding")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> SharesOutstanding
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.sharesoutstanding);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(SharesOutstanding));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.sharesoutstanding, value);
                this.OnPropertyChanged(nameof(SharesOutstanding));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Shipping Method
        ///     (Russian - 1049): Способ доставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a shipping method for deliveries sent to the account's address to designate the preferred carrier or other delivery option.
        ///     (Russian - 1049): Выберите способ доставки для доставок по адресу организации, выбрав предпочитаемую службу доставки или другой вариант доставки.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.shippingmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Shipping Method")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue ShippingMethodCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.shippingmethodcode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ShippingMethodCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.shippingmethodcode, value);
                this.OnPropertyChanged(nameof(ShippingMethodCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Shipping Method
        ///     (Russian - 1049): Способ доставки
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a shipping method for deliveries sent to the account's address to designate the preferred carrier or other delivery option.
        ///     (Russian - 1049): Выберите способ доставки для доставок по адресу организации, выбрав предпочитаемую службу доставки или другой вариант доставки.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.shippingmethodcode)]
        [System.ComponentModel.DescriptionAttribute("Shipping Method")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.shippingmethodcode> ShippingMethodCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.shippingmethodcode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.shippingmethodcode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.shippingmethodcode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.shippingmethodcode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ShippingMethodCodeEnum));
                this.OnPropertyChanging(nameof(ShippingMethodCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.shippingmethodcode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.shippingmethodcode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(ShippingMethodCode));
                this.OnPropertyChanged(nameof(ShippingMethodCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): SIC Code
        ///     (Russian - 1049): Код отрасли
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the Standard Industrial Classification (SIC) code that indicates the account's primary industry of business, for use in marketing segmentation and demographic analysis.
        ///     (Russian - 1049): Введите код отрасли (SIC), указывающий основную отрасль деятельности организации, для использования при маркетинговом сегментировании и демографическом анализе.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.sic)]
        [System.ComponentModel.DescriptionAttribute("SIC Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SIC
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.sic);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(SIC));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.sic, value);
                this.OnPropertyChanged(nameof(SIC));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): SLA
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the service level agreement (SLA) that you want to apply to the Account record.
        ///     (Russian - 1049): Выберите соглашение об уровнях обслуживания (SLA), которое нужно применить к этой записи организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.slaid)]
        [System.ComponentModel.DescriptionAttribute("SLA")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference SLAId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.slaid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(SLAId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.slaid, value);
                this.OnPropertyChanged(nameof(SLAId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Last SLA applied
        ///     (Russian - 1049): Последнее примененное SLA
        /// 
        /// Description:
        ///     (English - United States - 1033): Last SLA that was applied to this case. This field is for internal use only.
        ///     (Russian - 1049): Последнее SLA, примененное к этому обращению. Это поле предназначено только для внутреннего использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.slainvokedid)]
        [System.ComponentModel.DescriptionAttribute("Last SLA applied")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference SLAInvokedId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.slainvokedid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Process Stage
        ///     (Russian - 1049): Стадия процесса
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows the ID of the stage.
        ///     (Russian - 1049): Показывает идентификатор стадии.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.stageid)]
        [System.ComponentModel.DescriptionAttribute("Process Stage")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> StageId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(RFB.Core.Entities.Account.Schema.Attributes.stageid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(StageId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.stageid, value);
                this.OnPropertyChanged(nameof(StageId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Status
        ///     (Russian - 1049): Состояние
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows whether the account is active or inactive. Inactive accounts are read-only and can't be edited unless they are reactivated.
        ///     (Russian - 1049): Указывает, активна организация или нет. Неактивные организации доступны только для чтения. Их нельзя изменять без повторной активации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.statecode)]
        [System.ComponentModel.DescriptionAttribute("Status")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue StateCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.statecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(StateCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.statecode, value);
                this.OnPropertyChanged(nameof(StateCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Status
        ///     (Russian - 1049): Состояние
        /// 
        /// Description:
        ///     (English - United States - 1033): Shows whether the account is active or inactive. Inactive accounts are read-only and can't be edited unless they are reactivated.
        ///     (Russian - 1049): Указывает, активна организация или нет. Неактивные организации доступны только для чтения. Их нельзя изменять без повторной активации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.statecode)]
        [System.ComponentModel.DescriptionAttribute("Status")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.statecode> StateCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.statecode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.statecode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.statecode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.statecode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(StateCodeEnum));
                this.OnPropertyChanging(nameof(StateCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.statecode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.statecode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(StateCode));
                this.OnPropertyChanged(nameof(StateCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Status Reason
        ///     (Russian - 1049): Причина состояния
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the account's status.
        ///     (Russian - 1049): Выберите состояние организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.statuscode)]
        [System.ComponentModel.DescriptionAttribute("Status Reason")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue StatusCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.statuscode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(StatusCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.statuscode, value);
                this.OnPropertyChanged(nameof(StatusCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Status Reason
        ///     (Russian - 1049): Причина состояния
        /// 
        /// Description:
        ///     (English - United States - 1033): Select the account's status.
        ///     (Russian - 1049): Выберите состояние организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.statuscode)]
        [System.ComponentModel.DescriptionAttribute("Status Reason")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.statuscode> StatusCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.statuscode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.statuscode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.statuscode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.statuscode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(StatusCodeEnum));
                this.OnPropertyChanging(nameof(StatusCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.statuscode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.statuscode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(StatusCode));
                this.OnPropertyChanged(nameof(StatusCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Stock Exchange
        ///     (Russian - 1049): Фондовая биржа
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the stock exchange at which the account is listed to track their stock and financial performance of the company.
        ///     (Russian - 1049): Введите фондовую биржу, на которой котируются акции организации, для отслеживания курса акций и финансовых результатов компании.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.stockexchange)]
        [System.ComponentModel.DescriptionAttribute("Stock Exchange")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string StockExchange
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.stockexchange);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(StockExchange));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.stockexchange, value);
                this.OnPropertyChanged(nameof(StockExchange));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Main Phone
        ///     (Russian - 1049): Основной телефон
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the main phone number for this account.
        ///     (Russian - 1049): Введите основной номер телефона для этой организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.telephone1)]
        [System.ComponentModel.DescriptionAttribute("Main Phone")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Telephone1
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.telephone1);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Telephone1));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.telephone1, value);
                this.OnPropertyChanged(nameof(Telephone1));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Other Phone
        ///     (Russian - 1049): Другой телефон
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a second phone number for this account.
        ///     (Russian - 1049): Введите второй номер телефона для этой организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.telephone2)]
        [System.ComponentModel.DescriptionAttribute("Other Phone")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Telephone2
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.telephone2);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Telephone2));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.telephone2, value);
                this.OnPropertyChanged(nameof(Telephone2));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Telephone 3
        ///     (Russian - 1049): Телефон 3
        /// 
        /// Description:
        ///     (English - United States - 1033): Type a third phone number for this account.
        ///     (Russian - 1049): Введите третий номер телефона для этой организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.telephone3)]
        [System.ComponentModel.DescriptionAttribute("Telephone 3")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Telephone3
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.telephone3);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Telephone3));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.telephone3, value);
                this.OnPropertyChanged(nameof(Telephone3));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Territory Code
        ///     (Russian - 1049): Код территории
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a region or territory for the account for use in segmentation and analysis.
        ///     (Russian - 1049): Выберите область или регион для организации. Они будут использоваться при сегментировании и анализе.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.territorycode)]
        [System.ComponentModel.DescriptionAttribute("Territory Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue TerritoryCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.territorycode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TerritoryCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.territorycode, value);
                this.OnPropertyChanged(nameof(TerritoryCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Territory Code
        ///     (Russian - 1049): Код территории
        /// 
        /// Description:
        ///     (English - United States - 1033): Select a region or territory for the account for use in segmentation and analysis.
        ///     (Russian - 1049): Выберите область или регион для организации. Они будут использоваться при сегментировании и анализе.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.territorycode)]
        [System.ComponentModel.DescriptionAttribute("Territory Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<RFB.Core.Entities.Account.Schema.OptionSets.territorycode> TerritoryCodeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(RFB.Core.Entities.Account.Schema.Attributes.territorycode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(RFB.Core.Entities.Account.Schema.OptionSets.territorycode), optionSetValue.Value)))
                {
                    return ((RFB.Core.Entities.Account.Schema.OptionSets.territorycode)(System.Enum.ToObject(typeof(RFB.Core.Entities.Account.Schema.OptionSets.territorycode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TerritoryCodeEnum));
                this.OnPropertyChanging(nameof(TerritoryCode));
                if ((value == null))
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.territorycode, null);
                }
                else
                {
                    this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.territorycode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(TerritoryCode));
                this.OnPropertyChanged(nameof(TerritoryCodeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Territory
        ///     (Russian - 1049): Территория
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the sales region or territory for the account to make sure the account is assigned to the correct representative and for use in segmentation and analysis.
        ///     (Russian - 1049): Выберите для организации область или регион продаж, чтобы гарантировать назначение организации правильному представителю. Эти данные также используются при сегментации и анализе.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.territoryid)]
        [System.ComponentModel.DescriptionAttribute("Territory")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference TerritoryId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.territoryid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TerritoryId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.territoryid, value);
                this.OnPropertyChanged(nameof(TerritoryId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Ticker Symbol
        ///     (Russian - 1049): Тикер
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the stock exchange symbol for the account to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.
        ///     (Russian - 1049): Введите обозначение (тикер) организации на фондовой бирже для отслеживания финансовых результатов компании. Щелкнув введенный в этом поле код, вы сможете просмотреть новейшую биржевую информацию на MSN Money.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.tickersymbol)]
        [System.ComponentModel.DescriptionAttribute("Ticker Symbol")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TickerSymbol
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.tickersymbol);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TickerSymbol));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.tickersymbol, value);
                this.OnPropertyChanged(nameof(TickerSymbol));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Time Spent by me
        ///     (Russian - 1049): Время, затраченное мною
        /// 
        /// Description:
        ///     (English - United States - 1033): Total time spent for emails (read and write) and meetings by me in relation to account record.
        ///     (Russian - 1049): Общее время, затраченное мною на электронную почту (чтение и написание) и совещания в отношении записи организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.timespentbymeonemailandmeetings)]
        [System.ComponentModel.DescriptionAttribute("Time Spent by me")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TimeSpentByMeOnEmailAndMeetings
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.timespentbymeonemailandmeetings);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Time Zone Rule Version Number
        ///     (Russian - 1049): Номер версии правила часового пояса
        /// 
        /// Description:
        ///     (English - United States - 1033): For internal use only.
        ///     (Russian - 1049): Только для внутреннего использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.timezoneruleversionnumber)]
        [System.ComponentModel.DescriptionAttribute("Time Zone Rule Version Number")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> TimeZoneRuleVersionNumber
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.timezoneruleversionnumber);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TimeZoneRuleVersionNumber));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.timezoneruleversionnumber, value);
                this.OnPropertyChanged(nameof(TimeZoneRuleVersionNumber));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Currency
        ///     (Russian - 1049): Валюта
        /// 
        /// Description:
        ///     (English - United States - 1033): Choose the local currency for the record to make sure budgets are reported in the correct currency.
        ///     (Russian - 1049): Выберите для записи локальную валюту, чтобы отчеты по бюджетам формировались в правильной валюте.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.transactioncurrencyid)]
        [System.ComponentModel.DescriptionAttribute("Currency")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference TransactionCurrencyId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(RFB.Core.Entities.Account.Schema.Attributes.transactioncurrencyid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TransactionCurrencyId));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.transactioncurrencyid, value);
                this.OnPropertyChanged(nameof(TransactionCurrencyId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Traversed Path
        ///     (Russian - 1049): Пройденный путь
        /// 
        /// Description:
        ///     (English - United States - 1033): For internal use only.
        ///     (Russian - 1049): Только для внутреннего использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.traversedpath)]
        [System.ComponentModel.DescriptionAttribute("Traversed Path")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string TraversedPath
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.traversedpath);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TraversedPath));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.traversedpath, value);
                this.OnPropertyChanged(nameof(TraversedPath));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): UTC Conversion Time Zone Code
        ///     (Russian - 1049): Код часового пояса (преобразование в UTC)
        /// 
        /// Description:
        ///     (English - United States - 1033): Time zone code that was in use when the record was created.
        ///     (Russian - 1049): Код часового пояса, использовавшийся при создании записи.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.utcconversiontimezonecode)]
        [System.ComponentModel.DescriptionAttribute("UTC Conversion Time Zone Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> UTCConversionTimeZoneCode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(RFB.Core.Entities.Account.Schema.Attributes.utcconversiontimezonecode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(UTCConversionTimeZoneCode));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.utcconversiontimezonecode, value);
                this.OnPropertyChanged(nameof(UTCConversionTimeZoneCode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Version Number
        ///     (Russian - 1049): Номер версии
        /// 
        /// Description:
        ///     (English - United States - 1033): Version number of the account.
        ///     (Russian - 1049): Номер версии организации.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.versionnumber)]
        [System.ComponentModel.DescriptionAttribute("Version Number")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<long> VersionNumber
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>(RFB.Core.Entities.Account.Schema.Attributes.versionnumber);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Website
        ///     (Russian - 1049): Веб-сайт
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the account's website URL to get quick details about the company profile.
        ///     (Russian - 1049): Введите URL-адрес веб-сайта организации для быстрого получения сведений о профиле компании.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.websiteurl)]
        [System.ComponentModel.DescriptionAttribute("Website")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string WebSiteURL
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.websiteurl);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(WebSiteURL));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.websiteurl, value);
                this.OnPropertyChanged(nameof(WebSiteURL));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Yomi Account Name
        ///     (Russian - 1049): Название организации йоми
        /// 
        /// Description:
        ///     (English - United States - 1033): Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.
        ///     (Russian - 1049): Введите фонетическое произношение названия компании, если ее название указано на японском языке, для правильного произношения названия при телефонных звонках и других видах общения.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(RFB.Core.Entities.Account.Schema.Attributes.yominame)]
        [System.ComponentModel.DescriptionAttribute("Yomi Account Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string YomiName
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(RFB.Core.Entities.Account.Schema.Attributes.yominame);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(YomiName));
                this.SetAttributeValue(RFB.Core.Entities.Account.Schema.Attributes.yominame, value);
                this.OnPropertyChanged(nameof(YomiName));
            }
        }
        

        #endregion
    }
}
