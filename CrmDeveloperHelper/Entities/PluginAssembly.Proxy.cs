//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nav.Common.VSPackages.CrmDeveloperHelper.Entities
{
    
    
    /// <summary>
    /// DisplayName:
    ///     (English - United States - 1033): Plug-in Assembly
    ///     (Russian - 1049): Сборка подключаемого модуля
    /// 
    /// DisplayCollectionName:
    ///     (English - United States - 1033): Plug-in Assemblies
    ///     (Russian - 1049): Сборки подключаемых модулей
    /// 
    /// Description:
    ///     (English - United States - 1033): Assembly that contains one or more plug-in types.
    ///     (Russian - 1049): Сборка, содержащая один или несколько типов подключаемых модулей.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute()]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute(PluginAssembly.EntityLogicalName)]
    [System.ComponentModel.DescriptionAttribute("Plug-in Assembly")]
    public partial class PluginAssembly : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        
        public const string EntityLogicalName = "pluginassembly";
        
        public const string EntitySchemaName = "PluginAssembly";
        
        public const int EntityTypeCode = 4605;
        
        public const string EntityPrimaryIdAttribute = "pluginassemblyid";
        
        public const string EntityPrimaryNameAttribute = "name";
        
        /// <summary>
        /// Default Constructor pluginassembly
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PluginAssembly() : 
                base(EntityLogicalName)
        {
        }
        
        /// <summary>
        /// Constructor pluginassembly for populating via LINQ queries given a LINQ anonymous type object
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public PluginAssembly(object anonymousObject) : 
                this()
        {
            if (anonymousObject == null)
            {
                return;
            }

            System.Type anonymousObjectType = anonymousObject.GetType();

            if (!anonymousObjectType.Name.StartsWith("<>")
                || anonymousObjectType.Name.IndexOf("AnonymousType", System.StringComparison.InvariantCultureIgnoreCase) == -1
            )
            {
                return;
            }

            foreach (var prop in anonymousObjectType.GetProperties())
            {
                var value = prop.GetValue(anonymousObject, null);
                var name = prop.Name.ToLower();

                switch (name)
                {
                    case "id":
                    case EntityPrimaryIdAttribute:
                        if (value is System.Guid idValue)
                        {
                            Attributes[EntityPrimaryIdAttribute] = base.Id = idValue;
                        }
                        break;

                    default:
                        if (value is Microsoft.Xrm.Sdk.FormattedValueCollection formattedValueCollection)
                        {
                            FormattedValues.AddRange(formattedValueCollection);
                        }
                        else
                        {
                            Attributes[name] = value;
                        }
                        break;
                }
            }
        }
        
        #region NotifyProperty Events

        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanging(string propertyName)
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }
        

        #endregion
        
        #region Primary Attributes

        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the plug-in assembly.
        ///     (Russian - 1049): Уникальный идентификатор сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of the plug-in assembly.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Guid Id
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return base.Id;
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.PluginAssemblyId = value;
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the plug-in assembly.
        ///     (Russian - 1049): Уникальный идентификатор сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of the plug-in assembly.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> PluginAssemblyId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(EntityPrimaryIdAttribute);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PluginAssemblyId));
                this.SetAttributeValue(EntityPrimaryIdAttribute, value);
                if (value.HasValue)
                {
                    base.Id = value.Value;
                }
                else
                {
                    base.Id = System.Guid.Empty;
                }
                this.OnPropertyChanged(nameof(PluginAssemblyId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Name
        ///     (Russian - 1049): Название
        /// 
        /// Description:
        ///     (English - United States - 1033): Name of the plug-in assembly.
        ///     (Russian - 1049): Имя сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryNameAttribute)]
        [System.ComponentModel.DescriptionAttribute("Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Name
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(EntityPrimaryNameAttribute);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Name));
                this.SetAttributeValue(EntityPrimaryNameAttribute, value);
                this.OnPropertyChanged(nameof(Name));
            }
        }
        

        #endregion
        
        #region Attributes

        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Specifies mode of authentication with web sources
        ///     (Russian - 1049): Задает режим проверки подлинности с использованием веб-источников
        /// 
        /// Description:
        ///     (English - United States - 1033): Specifies mode of authentication with web sources like WebApp
        ///     (Russian - 1049): Задает режим проверки подлинности с использованием веб-источников, таких как WebApp
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.authtype)]
        [System.ComponentModel.DescriptionAttribute("Specifies mode of authentication with web sources")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue AuthType
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.authtype);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AuthType));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.authtype, value);
                this.OnPropertyChanged(nameof(AuthType));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Specifies mode of authentication with web sources
        ///     (Russian - 1049): Задает режим проверки подлинности с использованием веб-источников
        /// 
        /// Description:
        ///     (English - United States - 1033): Specifies mode of authentication with web sources like WebApp
        ///     (Russian - 1049): Задает режим проверки подлинности с использованием веб-источников, таких как WebApp
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.authtype)]
        [System.ComponentModel.DescriptionAttribute("Specifies mode of authentication with web sources")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.authtype> AuthTypeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.authtype);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.authtype), optionSetValue.Value)))
                {
                    return ((Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.authtype)(System.Enum.ToObject(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.authtype), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AuthTypeEnum));
                this.OnPropertyChanging(nameof(AuthType));
                if ((value == null))
                {
                    this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.authtype, null);
                }
                else
                {
                    this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.authtype, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(AuthType));
                this.OnPropertyChanged(nameof(AuthTypeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Component State
        ///     (Russian - 1049): Состояние компонента
        /// 
        /// Description:
        ///     (English - United States - 1033): For internal use only.
        ///     (Russian - 1049): Только для внутреннего использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.componentstate)]
        [System.ComponentModel.DescriptionAttribute("Component State")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue ComponentState
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.componentstate);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Component State
        ///     (Russian - 1049): Состояние компонента
        /// 
        /// Description:
        ///     (English - United States - 1033): For internal use only.
        ///     (Russian - 1049): Только для внутреннего использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.componentstate)]
        [System.ComponentModel.DescriptionAttribute("Component State")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componentstate> ComponentStateEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.componentstate);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componentstate), optionSetValue.Value)))
                {
                    return ((Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componentstate)(System.Enum.ToObject(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componentstate), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Bytes of the assembly, in Base64 format.
        ///     (Russian - 1049): Содержимое сборки в формате Base64.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.content)]
        [System.ComponentModel.DescriptionAttribute("Bytes of the assembly, in Base64 format.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Content
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.content);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Content));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.content, value);
                this.OnPropertyChanged(nameof(Content));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created By
        ///     (Russian - 1049): Создано
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the user who created the plug-in assembly.
        ///     (Russian - 1049): Уникальный идентификатор пользователя, создавшего сборку подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.createdby)]
        [System.ComponentModel.DescriptionAttribute("Created By")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference CreatedBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.createdby);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created On
        ///     (Russian - 1049): Дата создания
        /// 
        /// Description:
        ///     (English - United States - 1033): Date and time when the plug-in assembly was created.
        ///     (Russian - 1049): Дата и время создания сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.createdon)]
        [System.ComponentModel.DescriptionAttribute("Created On")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> CreatedOn
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.createdon);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created By (Delegate)
        ///     (Russian - 1049): Кем создано (делегат)
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the delegate user who created the pluginassembly.
        ///     (Russian - 1049): Уникальный идентификатор пользователя-делегата, создавшего pluginassembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.createdonbehalfby)]
        [System.ComponentModel.DescriptionAttribute("Created By (Delegate)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference CreatedOnBehalfBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.createdonbehalfby);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Culture
        ///     (Russian - 1049): Культура
        /// 
        /// Description:
        ///     (English - United States - 1033): Culture code for the plug-in assembly.
        ///     (Russian - 1049): Код культуры для сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.culture)]
        [System.ComponentModel.DescriptionAttribute("Culture")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Culture
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.culture);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Culture));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.culture, value);
                this.OnPropertyChanged(nameof(Culture));
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Customization Level.
        ///     (Russian - 1049): Уровень настройки.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.customizationlevel)]
        [System.ComponentModel.DescriptionAttribute("Customization Level.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> CustomizationLevel
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.customizationlevel);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Description
        ///     (Russian - 1049): Описание
        /// 
        /// Description:
        ///     (English - United States - 1033): Description of the plug-in assembly.
        ///     (Russian - 1049): Описание сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.description)]
        [System.ComponentModel.DescriptionAttribute("Description")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Description
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.description);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Description));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.description, value);
                this.OnPropertyChanged(nameof(Description));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Introduced Version
        ///     (Russian - 1049): Версия введения
        /// 
        /// Description:
        ///     (English - United States - 1033): Version in which the form is introduced.
        ///     (Russian - 1049): Версия, в которой была введена форма.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.introducedversion)]
        [System.ComponentModel.DescriptionAttribute("Introduced Version")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string IntroducedVersion
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.introducedversion);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IntroducedVersion));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.introducedversion, value);
                this.OnPropertyChanged(nameof(IntroducedVersion));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Customizable
        ///     (Russian - 1049): Настраиваемый
        /// 
        /// Description:
        ///     (English - United States - 1033): Information that specifies whether this component can be customized.
        ///     (Russian - 1049): Сведения, указывающие на возможность настройки этого компонента.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.iscustomizable)]
        [System.ComponentModel.DescriptionAttribute("Customizable")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.BooleanManagedProperty IsCustomizable
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.iscustomizable);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IsCustomizable));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.iscustomizable, value);
                this.OnPropertyChanged(nameof(IsCustomizable));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Hidden
        ///     (Russian - 1049): Скрытый
        /// 
        /// Description:
        ///     (English - United States - 1033): Information that specifies whether this component should be hidden.
        ///     (Russian - 1049): Сведения, указывающие на необходимость скрытия этого компонента.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.ishidden)]
        [System.ComponentModel.DescriptionAttribute("Hidden")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.BooleanManagedProperty IsHidden
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.BooleanManagedProperty>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.ishidden);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IsHidden));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.ishidden, value);
                this.OnPropertyChanged(nameof(IsHidden));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): State
        ///     (Russian - 1049): Область
        /// 
        /// Description:
        ///     (English - United States - 1033): Information that specifies whether this component is managed.
        ///     (Russian - 1049): Сведения о том, является ли компонент управляемым.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.ismanaged)]
        [System.ComponentModel.DescriptionAttribute("State")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> IsManaged
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.ismanaged);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Isolation Mode
        ///     (Russian - 1049): Режим изоляции
        /// 
        /// Description:
        ///     (English - United States - 1033): Information about how the plugin assembly is to be isolated at execution time; None / Sandboxed.
        ///     (Russian - 1049): Сведения о том, как сборка подключаемого модуля должна изолироваться во время выполнения (без изоляции или "песочницей").
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.isolationmode)]
        [System.ComponentModel.DescriptionAttribute("Isolation Mode")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue IsolationMode
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.isolationmode);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IsolationMode));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.isolationmode, value);
                this.OnPropertyChanged(nameof(IsolationMode));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Isolation Mode
        ///     (Russian - 1049): Режим изоляции
        /// 
        /// Description:
        ///     (English - United States - 1033): Information about how the plugin assembly is to be isolated at execution time; None / Sandboxed.
        ///     (Russian - 1049): Сведения о том, как сборка подключаемого модуля должна изолироваться во время выполнения (без изоляции или "песочницей").
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.isolationmode)]
        [System.ComponentModel.DescriptionAttribute("Isolation Mode")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.isolationmode> IsolationModeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.isolationmode);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.isolationmode), optionSetValue.Value)))
                {
                    return ((Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.isolationmode)(System.Enum.ToObject(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.isolationmode), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IsolationModeEnum));
                this.OnPropertyChanging(nameof(IsolationMode));
                if ((value == null))
                {
                    this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.isolationmode, null);
                }
                else
                {
                    this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.isolationmode, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(IsolationMode));
                this.OnPropertyChanged(nameof(IsolationModeEnum));
            }
        }
        
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.ispasswordset)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> IsPasswordSet
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.ispasswordset);
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Major of the assembly version.
        ///     (Russian - 1049): Основной номер версии сборки.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.major)]
        [System.ComponentModel.DescriptionAttribute("Major of the assembly version.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> Major
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.major);
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Minor of the assembly version.
        ///     (Russian - 1049): Дополнительный номер версии сборки.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.minor)]
        [System.ComponentModel.DescriptionAttribute("Minor of the assembly version.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> Minor
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.minor);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Modified By
        ///     (Russian - 1049): Изменено
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the user who last modified the plug-in assembly.
        ///     (Russian - 1049): Уникальный идентификатор последнего пользователя, изменившего сборку подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.modifiedby)]
        [System.ComponentModel.DescriptionAttribute("Modified By")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.modifiedby);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Modified On
        ///     (Russian - 1049): Дата изменения
        /// 
        /// Description:
        ///     (English - United States - 1033): Date and time when the plug-in assembly was last modified.
        ///     (Russian - 1049): Дата и время последнего изменения сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.modifiedon)]
        [System.ComponentModel.DescriptionAttribute("Modified On")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> ModifiedOn
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.modifiedon);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Modified By (Delegate)
        ///     (Russian - 1049): Кем изменено (делегат)
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the delegate user who last modified the pluginassembly.
        ///     (Russian - 1049): Уникальный идентификатор пользователя-делегата, последним изменившего pluginassembly.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.modifiedonbehalfby)]
        [System.ComponentModel.DescriptionAttribute("Modified By (Delegate)")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference ModifiedOnBehalfBy
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.modifiedonbehalfby);
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the organization with which the plug-in assembly is associated.
        ///     (Russian - 1049): Уникальный идентификатор организации, с которой связана сборка подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.organizationid)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of the organization with which the plug-in assembly is associat" +
            "ed.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference OrganizationId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.organizationid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Record Overwrite Time
        ///     (Russian - 1049): Время замены записи
        /// 
        /// Description:
        ///     (English - United States - 1033): For internal use only.
        ///     (Russian - 1049): Только для внутреннего использования.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.overwritetime)]
        [System.ComponentModel.DescriptionAttribute("Record Overwrite Time")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> OverwriteTime
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.overwritetime);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): User Password
        ///     (Russian - 1049): Пароль пользователя
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.password)]
        [System.ComponentModel.DescriptionAttribute("User Password")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Password
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.password);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Password));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.password, value);
                this.OnPropertyChanged(nameof(Password));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Path
        ///     (Russian - 1049): Путь
        /// 
        /// Description:
        ///     (English - United States - 1033): File name of the plug-in assembly. Used when the source type is set to 1.
        ///     (Russian - 1049): Имя файла сборки подключаемого модуля. Используется, если исходный тип равен 1.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.path)]
        [System.ComponentModel.DescriptionAttribute("Path")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Path
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.path);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Path));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.path, value);
                this.OnPropertyChanged(nameof(Path));
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the plug-in assembly.
        ///     (Russian - 1049): Уникальный идентификатор сборки подключаемого модуля.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.pluginassemblyidunique)]
        [System.ComponentModel.DescriptionAttribute("Unique identifier of the plug-in assembly.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> PluginAssemblyIdUnique
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.pluginassemblyidunique);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Public Key Token
        ///     (Russian - 1049): Токен открытого ключа
        /// 
        /// Description:
        ///     (English - United States - 1033): Public key token of the assembly. This value can be obtained from the assembly by using reflection.
        ///     (Russian - 1049): Токен общего ключа сборки. Это значение можно получить из сборки путем отражения.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.publickeytoken)]
        [System.ComponentModel.DescriptionAttribute("Public Key Token")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string PublicKeyToken
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.publickeytoken);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(PublicKeyToken));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.publickeytoken, value);
                this.OnPropertyChanged(nameof(PublicKeyToken));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Solution
        ///     (Russian - 1049): Решение
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the associated solution.
        ///     (Russian - 1049): Уникальный идентификатор связанного решения.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.solutionid)]
        [System.ComponentModel.DescriptionAttribute("Solution")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> SolutionId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.solutionid);
            }
        }
        
        /// <summary>
        /// Description:
        ///     (English - United States - 1033): Hash of the source of the assembly.
        ///     (Russian - 1049): Хэш источника сборки.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcehash)]
        [System.ComponentModel.DescriptionAttribute("Hash of the source of the assembly.")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string SourceHash
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcehash);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(SourceHash));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcehash, value);
                this.OnPropertyChanged(nameof(SourceHash));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Source Type
        ///     (Russian - 1049): Тип источника
        /// 
        /// Description:
        ///     (English - United States - 1033): Location of the assembly, for example 0=database, 1=on-disk.
        ///     (Russian - 1049): Расположение сборки, например 0=база данных, 1=на диске.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcetype)]
        [System.ComponentModel.DescriptionAttribute("Source Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue SourceType
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcetype);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(SourceType));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcetype, value);
                this.OnPropertyChanged(nameof(SourceType));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Source Type
        ///     (Russian - 1049): Тип источника
        /// 
        /// Description:
        ///     (English - United States - 1033): Location of the assembly, for example 0=database, 1=on-disk.
        ///     (Russian - 1049): Расположение сборки, например 0=база данных, 1=на диске.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcetype)]
        [System.ComponentModel.DescriptionAttribute("Source Type")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.sourcetype> SourceTypeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcetype);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.sourcetype), optionSetValue.Value)))
                {
                    return ((Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.sourcetype)(System.Enum.ToObject(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.OptionSets.sourcetype), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(SourceTypeEnum));
                this.OnPropertyChanging(nameof(SourceType));
                if ((value == null))
                {
                    this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcetype, null);
                }
                else
                {
                    this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.sourcetype, new Microsoft.Xrm.Sdk.OptionSetValue(((int)(value))));
                }
                this.OnPropertyChanged(nameof(SourceType));
                this.OnPropertyChanged(nameof(SourceTypeEnum));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Web Url
        ///     (Russian - 1049): URL-адрес
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.url)]
        [System.ComponentModel.DescriptionAttribute("Web Url")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Url
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.url);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Url));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.url, value);
                this.OnPropertyChanged(nameof(Url));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): User Name
        ///     (Russian - 1049): Имя пользователя
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.username)]
        [System.ComponentModel.DescriptionAttribute("User Name")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string UserName
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.username);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(UserName));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.username, value);
                this.OnPropertyChanged(nameof(UserName));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Version
        ///     (Russian - 1049): Версия
        /// 
        /// Description:
        ///     (English - United States - 1033): Version number of the assembly. The value can be obtained from the assembly through reflection.
        ///     (Russian - 1049): Номер версии сборки. Это значение можно получить из сборки путем отражения.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.version)]
        [System.ComponentModel.DescriptionAttribute("Version")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Version
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.version);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Version));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.version, value);
                this.OnPropertyChanged(nameof(Version));
            }
        }
        
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.versionnumber)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<long> VersionNumber
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.PluginAssembly.Schema.Attributes.versionnumber);
            }
        }
        

        #endregion
    }
}
