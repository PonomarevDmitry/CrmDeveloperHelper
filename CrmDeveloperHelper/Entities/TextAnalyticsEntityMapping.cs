//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nav.Common.VSPackages.CrmDeveloperHelper.Entities
{
    
    
    /// <summary>
    /// DisplayName:
    ///     (English - United States - 1033): Text Analytics Entity Mapping
    /// 
    /// DisplayCollectionName:
    ///     (English - United States - 1033): Text Analytics Entity Mappings
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute()]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute(TextAnalyticsEntityMapping.EntityLogicalName)]
    public partial class TextAnalyticsEntityMapping : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        
        public const string EntityLogicalName = "textanalyticsentitymapping";
        
        public const string EntitySchemaName = "TextAnalyticsEntityMapping";
        
        public const int EntityTypeCode = 9945;
        
        public const string EntityPrimaryIdAttribute = "textanalyticsentitymappingid";
        
        /// <summary>
        /// Default Constructor textanalyticsentitymapping
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TextAnalyticsEntityMapping() : 
                base(EntityLogicalName)
        {
        }
        
        /// <summary>
        /// Constructor textanalyticsentitymapping for populating via LINQ queries given a LINQ anonymous type object
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public TextAnalyticsEntityMapping(object anonymousObject) : 
                this()
        {
            if (anonymousObject == null)
            {
                return;
            }

            System.Type anonymousObjectType = anonymousObject.GetType();

            if (!anonymousObjectType.Name.StartsWith("<>")
                || anonymousObjectType.Name.IndexOf("AnonymousType", System.StringComparison.InvariantCultureIgnoreCase) == -1
            )
            {
                return;
            }

            foreach (var prop in anonymousObjectType.GetProperties())
            {
                var value = prop.GetValue(anonymousObject, null);
                var name = prop.Name.ToLower();

                switch (name)
                {
                    case "id":
                    case EntityPrimaryIdAttribute:
                        if (value is System.Guid idValue)
                        {
                            Attributes[EntityPrimaryIdAttribute] = base.Id = idValue;
                        }
                        break;

                    default:
                        if (value is Microsoft.Xrm.Sdk.FormattedValueCollection formattedValueCollection)
                        {
                            FormattedValues.AddRange(formattedValueCollection);
                        }
                        else
                        {
                            Attributes[name] = value;
                        }
                        break;
                }
            }
        }
        
        #region NotifyProperty Events
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanging(string propertyName)
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }
        #endregion
        
        #region Primary Attributes
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Text Analytics Entity Mapping
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier for entity instances
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Guid Id
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return base.Id;
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.TextAnalyticsEntityMappingId = value;
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Text Analytics Entity Mapping
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier for entity instances
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> TextAnalyticsEntityMappingId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(EntityPrimaryIdAttribute);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TextAnalyticsEntityMappingId));
                this.SetAttributeValue(EntityPrimaryIdAttribute, value);
                if (value.HasValue)
                {
                    base.Id = value.Value;
                }
                else
                {
                    base.Id = System.Guid.Empty;
                }
                this.OnPropertyChanged(nameof(TextAnalyticsEntityMappingId));
            }
        }
        #endregion
        
        #region Attributes
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Advanced Similarity RuleId
        /// 
        /// Description:
        ///     (English - United States - 1033): Advanced Similarity RuleId associated with entity mapping.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.advancedsimilarityruleid)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference AdvancedSimilarityRuleId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.advancedsimilarityruleid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(AdvancedSimilarityRuleId));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.advancedsimilarityruleid, value);
                this.OnPropertyChanged(nameof(AdvancedSimilarityRuleId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Component State
        /// 
        /// Description:
        ///     (English - United States - 1033): For internal use only.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.componentstate)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue ComponentState
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.componentstate);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Entity
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entity)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Entity
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entity);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Entity));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entity, value);
                this.OnPropertyChanged(nameof(Entity));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Entity Name
        /// 
        /// Description:
        ///     (English - United States - 1033): Entity Display Name
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entitydisplayname)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EntityDisplayName
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entitydisplayname);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(EntityDisplayName));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entitydisplayname, value);
                this.OnPropertyChanged(nameof(EntityDisplayName));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Entity
        /// 
        /// Description:
        ///     (English - United States - 1033): Select Entity
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entitypicklist)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string EntityPickList
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entitypicklist);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(EntityPickList));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.entitypicklist, value);
                this.OnPropertyChanged(nameof(EntityPickList));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Field
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.field)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string Field
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.field);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(Field));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.field, value);
                this.OnPropertyChanged(nameof(Field));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Field Name
        /// 
        /// Description:
        ///     (English - United States - 1033): Field Display Name
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.fielddisplayname)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string FieldDisplayName
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.fielddisplayname);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(FieldDisplayName));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.fielddisplayname, value);
                this.OnPropertyChanged(nameof(FieldDisplayName));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Field
        /// 
        /// Description:
        ///     (English - United States - 1033): Select Field
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.fieldpicklist)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue FieldPickList
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.fieldpicklist);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(FieldPickList));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.fieldpicklist, value);
                this.OnPropertyChanged(nameof(FieldPickList));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): State
        /// 
        /// Description:
        ///     (English - United States - 1033): Is Manageed
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.ismanaged)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> IsManaged
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.ismanaged);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Criteria
        /// 
        /// Description:
        ///     (English - United States - 1033): Specify if the mapping is for text match or exact match
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.istextmatchmapping)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> IsTextMatchMapping
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.istextmatchmapping);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IsTextMatchMapping));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.istextmatchmapping, value);
                this.OnPropertyChanged(nameof(IsTextMatchMapping));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Knowledge Search Model Id
        /// 
        /// Description:
        ///     (English - United States - 1033): Knowledge Search Model associated with entity mapping.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.knowledgesearchmodelid)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference KnowledgeSearchModelId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.knowledgesearchmodelid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(KnowledgeSearchModelId));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.knowledgesearchmodelid, value);
                this.OnPropertyChanged(nameof(KnowledgeSearchModelId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Model Type
        /// 
        /// Description:
        ///     (English - United States - 1033): Model Type.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.modeltype)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<int> ModelType
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<int>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.modeltype);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ModelType));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.modeltype, value);
                this.OnPropertyChanged(nameof(ModelType));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Organization
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the organization associated with the Text Analytics Entity Mapping.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.organizationid)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference OrganizationId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.organizationid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Created On
        /// 
        /// Description:
        ///     (English - United States - 1033): Date and time when the record was created.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.overwritetime)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.DateTime> OverwriteTime
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.DateTime>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.overwritetime);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Relationship Name
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.relationshipname)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public string RelationshipName
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<string>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.relationshipname);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(RelationshipName));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.relationshipname, value);
                this.OnPropertyChanged(nameof(RelationshipName));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Similarity Rule Id
        /// 
        /// Description:
        ///     (English - United States - 1033): Similarity Rule associated with entity mapping.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.similarityruleid)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference SimilarityRuleId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.similarityruleid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(SimilarityRuleId));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.similarityruleid, value);
                this.OnPropertyChanged(nameof(SimilarityRuleId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Solution
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the associated solution.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.solutionid)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> SolutionId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.solutionid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Text Analytics Entity Mapping Unique Id
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the Text Analytics Entity Mapping
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.textanalyticsentitymappingidunique)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> TextAnalyticsEntityMappingIdUnique
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.textanalyticsentitymappingidunique);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Topic Model Configuration Id
        /// 
        /// Description:
        ///     (English - United States - 1033): Topic Model Configuration associated with entity mapping.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.topicmodelconfigurationid)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference TopicModelConfigurationId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.topicmodelconfigurationid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(TopicModelConfigurationId));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.TextAnalyticsEntityMapping.Schema.Attributes.topicmodelconfigurationid, value);
                this.OnPropertyChanged(nameof(TopicModelConfigurationId));
            }
        }
        #endregion
    }
}
