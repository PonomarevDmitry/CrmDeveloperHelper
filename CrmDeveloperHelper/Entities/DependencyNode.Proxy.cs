//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nav.Common.VSPackages.CrmDeveloperHelper.Entities
{
    
    
    /// <summary>
    /// DisplayName:
    ///     (English - United States - 1033): Dependency Node
    ///     (Russian - 1049): Узел зависимости
    /// 
    /// DisplayCollectionName:
    ///     (English - United States - 1033): Dependency Nodes
    ///     (Russian - 1049): Узлы зависимости
    /// 
    /// Description:
    ///     (English - United States - 1033): The representation of a component dependency node in CRM.
    ///     (Russian - 1049): Представление узла зависимости компонентов в CRM.
    /// </summary>
    [System.Runtime.Serialization.DataContractAttribute()]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [Microsoft.Xrm.Sdk.Client.EntityLogicalNameAttribute(DependencyNode.EntityLogicalName)]
    [System.ComponentModel.DescriptionAttribute("Dependency Node")]
    public partial class DependencyNode : Microsoft.Xrm.Sdk.Entity, System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
    {
        
        public const string EntityLogicalName = "dependencynode";
        
        public const string EntitySchemaName = "DependencyNode";
        
        public const int EntityTypeCode = 7106;
        
        public const string EntityPrimaryIdAttribute = "dependencynodeid";
        
        /// <summary>
        /// Default Constructor dependencynode
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DependencyNode() : 
                base(EntityLogicalName)
        {
        }
        
        /// <summary>
        /// Constructor dependencynode for populating via LINQ queries given a LINQ anonymous type object
        /// </summary>
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DependencyNode(object anonymousObject) : 
                this()
        {
            if (anonymousObject == null)
            {
                return;
            }

            System.Type anonymousObjectType = anonymousObject.GetType();

            if (!anonymousObjectType.Name.StartsWith("<>")
                || anonymousObjectType.Name.IndexOf("AnonymousType", System.StringComparison.InvariantCultureIgnoreCase) == -1
            )
            {
                return;
            }

            foreach (var prop in anonymousObjectType.GetProperties())
            {
                var value = prop.GetValue(anonymousObject, null);
                var name = prop.Name.ToLower();

                switch (name)
                {
                    case "id":
                    case EntityPrimaryIdAttribute:
                        if (value is System.Guid idValue)
                        {
                            Attributes[EntityPrimaryIdAttribute] = base.Id = idValue;
                        }
                        break;

                    default:
                        if (value is Microsoft.Xrm.Sdk.FormattedValueCollection formattedValueCollection)
                        {
                            FormattedValues.AddRange(formattedValueCollection);
                        }
                        else
                        {
                            Attributes[name] = value;
                        }
                        break;
                }
            }
        }
        
        #region NotifyProperty Events

        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanged(string propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void OnPropertyChanging(string propertyName)
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
            }
        }
        

        #endregion
        
        #region Primary Attributes

        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Dependency Node Identifier
        ///     (Russian - 1049): Идентификатор узла зависимости
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the dependency node.
        ///     (Russian - 1049): Уникальный идентификатор узла зависимости.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.ComponentModel.DescriptionAttribute("Dependency Node Identifier")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Guid Id
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return base.Id;
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                base.Id = value;
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Dependency Node Identifier
        ///     (Russian - 1049): Идентификатор узла зависимости
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the dependency node.
        ///     (Russian - 1049): Уникальный идентификатор узла зависимости.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(EntityPrimaryIdAttribute)]
        [System.ComponentModel.DescriptionAttribute("Dependency Node Identifier")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> DependencyNodeId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(EntityPrimaryIdAttribute);
            }
        }
        

        #endregion
        
        #region Attributes

        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Base Solution
        ///     (Russian - 1049): Базовое решение
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the user who created the solution
        ///     (Russian - 1049): Уникальный идентификатор пользователя, создавшего решение.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.basesolutionid)]
        [System.ComponentModel.DescriptionAttribute("Base Solution")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference BaseSolutionId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.basesolutionid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Type Code
        ///     (Russian - 1049): Код типа
        /// 
        /// Description:
        ///     (English - United States - 1033): The type code of the component.
        ///     (Russian - 1049): Код типа компонента.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.componenttype)]
        [System.ComponentModel.DescriptionAttribute("Type Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.OptionSetValue ComponentType
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.componenttype);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Type Code
        ///     (Russian - 1049): Код типа
        /// 
        /// Description:
        ///     (English - United States - 1033): The type code of the component.
        ///     (Russian - 1049): Код типа компонента.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.componenttype)]
        [System.ComponentModel.DescriptionAttribute("Type Code")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componenttype> ComponentTypeEnum
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                Microsoft.Xrm.Sdk.OptionSetValue optionSetValue = this.GetAttributeValue<Microsoft.Xrm.Sdk.OptionSetValue>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.componenttype);
                if (((optionSetValue != null) 
                            && System.Enum.IsDefined(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componenttype), optionSetValue.Value)))
                {
                    return ((Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componenttype)(System.Enum.ToObject(typeof(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.GlobalOptionSets.componenttype), optionSetValue.Value)));
                }
                else
                {
                    return null;
                }
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Introduced Version
        ///     (Russian - 1049): Версия введения
        /// 
        /// Description:
        ///     (English - United States - 1033): Introduced version for the component
        ///     (Russian - 1049): Введенная версия компонента
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.introducedversion)]
        [System.ComponentModel.DescriptionAttribute("Introduced Version")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<double> IntroducedVersion
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<double>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.introducedversion);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(IntroducedVersion));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.introducedversion, value);
                this.OnPropertyChanged(nameof(IntroducedVersion));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Shared Component
        ///     (Russian - 1049): Общий компонент
        /// 
        /// Description:
        ///     (English - United States - 1033): Whether this component is shared by two solutions with the same publisher.
        ///     (Russian - 1049): Указывает, является ли этот компонент общим для двух решений, имеющих одного издателя.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.issharedcomponent)]
        [System.ComponentModel.DescriptionAttribute("Shared Component")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<bool> IsSharedComponent
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<bool>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.issharedcomponent);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Regarding
        ///     (Russian - 1049): В отношении
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the object with which the node is associated.
        ///     (Russian - 1049): Уникальный идентификатор объекта, с которым связан узел.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.objectid)]
        [System.ComponentModel.DescriptionAttribute("Regarding")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> ObjectId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.objectid);
            }
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            set
            {
                this.OnPropertyChanging(nameof(ObjectId));
                this.SetAttributeValue(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.objectid, value);
                this.OnPropertyChanged(nameof(ObjectId));
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Parent Entity
        ///     (Russian - 1049): Родительская сущность
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the parent entity.
        ///     (Russian - 1049): Уникальный идентификатор родительской сущности.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.parentid)]
        [System.ComponentModel.DescriptionAttribute("Parent Entity")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<System.Guid> ParentId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<System.Guid>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.parentid);
            }
        }
        
        /// <summary>
        /// DisplayName:
        ///     (English - United States - 1033): Top Solution
        ///     (Russian - 1049): Лучшее решение
        /// 
        /// Description:
        ///     (English - United States - 1033): Unique identifier of the top solution.
        ///     (Russian - 1049): Уникальный идентификатор лучшего решения.
        /// </summary>
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.topsolutionid)]
        [System.ComponentModel.DescriptionAttribute("Top Solution")]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Microsoft.Xrm.Sdk.EntityReference TopSolutionId
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<Microsoft.Xrm.Sdk.EntityReference>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.topsolutionid);
            }
        }
        
        [Microsoft.Xrm.Sdk.AttributeLogicalNameAttribute(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.versionnumber)]
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public System.Nullable<long> VersionNumber
        {
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            get
            {
                return this.GetAttributeValue<System.Nullable<long>>(Nav.Common.VSPackages.CrmDeveloperHelper.Entities.DependencyNode.Schema.Attributes.versionnumber);
            }
        }
        

        #endregion
    }
}
